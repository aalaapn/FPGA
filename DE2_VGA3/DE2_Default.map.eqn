-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--led[0] is led[0]
led[0] = DFFEAS(sum[0], E1__clk0,  ,  , A1L639,  ,  ,  ,  );


--led[1] is led[1]
led[1] = DFFEAS(sum[1], E1__clk0,  ,  , A1L639,  ,  ,  ,  );


--led[2] is led[2]
led[2] = DFFEAS(sum[2], E1__clk0,  ,  , A1L639,  ,  ,  ,  );


--led[3] is led[3]
led[3] = DFFEAS(sum[3], E1__clk0,  ,  , A1L639,  ,  ,  ,  );


--addr_reg[0] is addr_reg[0]
addr_reg[0] = DFFEAS(A1L534, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[1] is addr_reg[1]
addr_reg[1] = DFFEAS(A1L533, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[2] is addr_reg[2]
addr_reg[2] = DFFEAS(A1L532, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[3] is addr_reg[3]
addr_reg[3] = DFFEAS(A1L531, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[4] is addr_reg[4]
addr_reg[4] = DFFEAS(A1L530, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[5] is addr_reg[5]
addr_reg[5] = DFFEAS(A1L529, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[6] is addr_reg[6]
addr_reg[6] = DFFEAS(A1L528, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[7] is addr_reg[7]
addr_reg[7] = DFFEAS(A1L527, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[8] is addr_reg[8]
addr_reg[8] = DFFEAS(A1L526, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[9] is addr_reg[9]
addr_reg[9] = DFFEAS(A1L525, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[10] is addr_reg[10]
addr_reg[10] = DFFEAS(A1L524, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[11] is addr_reg[11]
addr_reg[11] = DFFEAS(A1L523, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[12] is addr_reg[12]
addr_reg[12] = DFFEAS(A1L522, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[13] is addr_reg[13]
addr_reg[13] = DFFEAS(A1L521, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[14] is addr_reg[14]
addr_reg[14] = DFFEAS(A1L520, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[15] is addr_reg[15]
addr_reg[15] = DFFEAS(A1L519, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[16] is addr_reg[16]
addr_reg[16] = DFFEAS(A1L518, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--addr_reg[17] is addr_reg[17]
addr_reg[17] = DFFEAS(A1L517, E1__clk0,  ,  , A1L503,  ,  ,  ,  );


--we is we
we = DFFEAS(A1L713, E1__clk0,  ,  ,  ,  ,  , !KEY[0],  );


--E1__clk0 is VGA_Audio_PLL:p1|altpll:altpll_component|_clk0
E1__clk0 = PLL.CLK0(.ENA(), .CLKSWITCH(), .ARESET(!C1_oRESET), .PFDENA(), .INCLK(CLOCK_27), .INCLK());

--E1__clk2 is VGA_Audio_PLL:p1|altpll:altpll_component|_clk2
E1__clk2 = PLL.CLK2(.ENA(), .CLKSWITCH(), .ARESET(!C1_oRESET), .PFDENA(), .INCLK(CLOCK_27), .INCLK());


--D1_oVGA_H_SYNC is VGA_Controller:u1|oVGA_H_SYNC
D1_oVGA_H_SYNC = DFFEAS(D1L51, E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1_oVGA_V_SYNC is VGA_Controller:u1|oVGA_V_SYNC
D1_oVGA_V_SYNC = DFFEAS(D1L164, E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1_oVGA_BLANK is VGA_Controller:u1|oVGA_BLANK
D1_oVGA_BLANK = D1_oVGA_H_SYNC & D1_oVGA_V_SYNC;


--D1_Cur_Color_R[6] is VGA_Controller:u1|Cur_Color_R[6]
D1_Cur_Color_R[6] = DFFEAS(mVGA_R[6], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1_V_Cont[6] is VGA_Controller:u1|V_Cont[6]
D1_V_Cont[6] = DFFEAS(D1L76, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1_V_Cont[7] is VGA_Controller:u1|V_Cont[7]
D1_V_Cont[7] = DFFEAS(D1L79, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1_V_Cont[8] is VGA_Controller:u1|V_Cont[8]
D1_V_Cont[8] = DFFEAS(D1L82, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1L47 is VGA_Controller:u1|LessThan~1038
D1L47 = !D1_V_Cont[6] & !D1_V_Cont[7] & !D1_V_Cont[8];


--D1_V_Cont[1] is VGA_Controller:u1|V_Cont[1]
D1_V_Cont[1] = DFFEAS(D1L61, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1_V_Cont[2] is VGA_Controller:u1|V_Cont[2]
D1_V_Cont[2] = DFFEAS(D1L64, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1_V_Cont[3] is VGA_Controller:u1|V_Cont[3]
D1_V_Cont[3] = DFFEAS(D1L67, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1L48 is VGA_Controller:u1|LessThan~1039
D1L48 = !D1_V_Cont[1] & !D1_V_Cont[2] & !D1_V_Cont[3];


--D1_V_Cont[4] is VGA_Controller:u1|V_Cont[4]
D1_V_Cont[4] = DFFEAS(D1L70, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1_V_Cont[5] is VGA_Controller:u1|V_Cont[5]
D1_V_Cont[5] = DFFEAS(D1L73, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1L49 is VGA_Controller:u1|LessThan~1040
D1L49 = D1L48 & !D1_V_Cont[4] # !D1_V_Cont[5];


--D1_V_Cont[9] is VGA_Controller:u1|V_Cont[9]
D1_V_Cont[9] = DFFEAS(D1L85, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1L50 is VGA_Controller:u1|LessThan~1041
D1L50 = D1_V_Cont[4] # D1_V_Cont[5] # !D1L48 # !D1L47;


--D1L159 is VGA_Controller:u1|oVGA_R~304
D1L159 = D1_V_Cont[9] & (!D1L50) # !D1_V_Cont[9] & (!D1L49 # !D1L47);


--D1_H_Cont[7] is VGA_Controller:u1|H_Cont[7]
D1_H_Cont[7] = DFFEAS(D1L39, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[4] is VGA_Controller:u1|H_Cont[4]
D1_H_Cont[4] = DFFEAS(D1L30, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[2] is VGA_Controller:u1|H_Cont[2]
D1_H_Cont[2] = DFFEAS(D1L24, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[3] is VGA_Controller:u1|H_Cont[3]
D1_H_Cont[3] = DFFEAS(D1L27, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[0] is VGA_Controller:u1|H_Cont[0]
D1_H_Cont[0] = DFFEAS(D1L18, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[1] is VGA_Controller:u1|H_Cont[1]
D1_H_Cont[1] = DFFEAS(D1L21, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--A1L662 is rtl~188
A1L662 = !D1_H_Cont[0] & !D1_H_Cont[1];


--D1L160 is VGA_Controller:u1|oVGA_R~305
D1L160 = D1_H_Cont[4] & D1_H_Cont[2] & D1_H_Cont[3] & !A1L662;


--D1_H_Cont[5] is VGA_Controller:u1|H_Cont[5]
D1_H_Cont[5] = DFFEAS(D1L33, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1_H_Cont[6] is VGA_Controller:u1|H_Cont[6]
D1_H_Cont[6] = DFFEAS(D1L36, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--A1L663 is rtl~189
A1L663 = !D1_H_Cont[5] & !D1_H_Cont[6];


--D1_H_Cont[8] is VGA_Controller:u1|H_Cont[8]
D1_H_Cont[8] = DFFEAS(D1L42, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1L161 is VGA_Controller:u1|oVGA_R~306
D1L161 = D1_H_Cont[7] & !D1_H_Cont[8] & (D1L160 # !A1L663);


--A1L664 is rtl~190
A1L664 = !D1_H_Cont[5] & !D1_H_Cont[6] & !D1_H_Cont[7];


--D1_H_Cont[9] is VGA_Controller:u1|H_Cont[9]
D1_H_Cont[9] = DFFEAS(D1L45, E1__clk0, C1_oRESET,  ,  ,  ,  , D1L55,  );


--D1L162 is VGA_Controller:u1|oVGA_R~307
D1L162 = D1_H_Cont[8] & (A1L664 & !D1L160 # !D1_H_Cont[9]) # !D1_H_Cont[8] & (D1_H_Cont[9]);


--D1L155 is VGA_Controller:u1|oVGA_R[6]~308
D1L155 = D1_Cur_Color_R[6] & D1L159 & (D1L161 # D1L162);


--D1_Cur_Color_R[7] is VGA_Controller:u1|Cur_Color_R[7]
D1_Cur_Color_R[7] = DFFEAS(mVGA_R[7], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L156 is VGA_Controller:u1|oVGA_R[7]~309
D1L156 = D1L159 & D1_Cur_Color_R[7] & (D1L161 # D1L162);


--D1_Cur_Color_R[8] is VGA_Controller:u1|Cur_Color_R[8]
D1_Cur_Color_R[8] = DFFEAS(mVGA_R[8], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L157 is VGA_Controller:u1|oVGA_R[8]~310
D1L157 = D1L159 & D1_Cur_Color_R[8] & (D1L161 # D1L162);


--D1_Cur_Color_R[9] is VGA_Controller:u1|Cur_Color_R[9]
D1_Cur_Color_R[9] = DFFEAS(mVGA_R[9], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L158 is VGA_Controller:u1|oVGA_R[9]~311
D1L158 = D1L159 & D1_Cur_Color_R[9] & (D1L161 # D1L162);


--D1_Cur_Color_G[6] is VGA_Controller:u1|Cur_Color_G[6]
D1_Cur_Color_G[6] = DFFEAS(mVGA_G[6], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L150 is VGA_Controller:u1|oVGA_G[6]~60
D1L150 = D1L159 & D1_Cur_Color_G[6] & (D1L161 # D1L162);


--D1_Cur_Color_G[7] is VGA_Controller:u1|Cur_Color_G[7]
D1_Cur_Color_G[7] = DFFEAS(mVGA_G[7], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L151 is VGA_Controller:u1|oVGA_G[7]~61
D1L151 = D1L159 & D1_Cur_Color_G[7] & (D1L161 # D1L162);


--D1_Cur_Color_G[8] is VGA_Controller:u1|Cur_Color_G[8]
D1_Cur_Color_G[8] = DFFEAS(mVGA_G[8], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L152 is VGA_Controller:u1|oVGA_G[8]~62
D1L152 = D1L159 & D1_Cur_Color_G[8] & (D1L161 # D1L162);


--D1_Cur_Color_G[9] is VGA_Controller:u1|Cur_Color_G[9]
D1_Cur_Color_G[9] = DFFEAS(mVGA_G[9], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L153 is VGA_Controller:u1|oVGA_G[9]~63
D1L153 = D1L159 & D1_Cur_Color_G[9] & (D1L161 # D1L162);


--D1_Cur_Color_B[6] is VGA_Controller:u1|Cur_Color_B[6]
D1_Cur_Color_B[6] = DFFEAS(mVGA_B[6], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L146 is VGA_Controller:u1|oVGA_B[6]~60
D1L146 = D1L159 & D1_Cur_Color_B[6] & (D1L161 # D1L162);


--D1_Cur_Color_B[7] is VGA_Controller:u1|Cur_Color_B[7]
D1_Cur_Color_B[7] = DFFEAS(mVGA_B[7], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L147 is VGA_Controller:u1|oVGA_B[7]~61
D1L147 = D1L159 & D1_Cur_Color_B[7] & (D1L161 # D1L162);


--D1_Cur_Color_B[8] is VGA_Controller:u1|Cur_Color_B[8]
D1_Cur_Color_B[8] = DFFEAS(mVGA_B[8], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L148 is VGA_Controller:u1|oVGA_B[8]~62
D1L148 = D1L159 & D1_Cur_Color_B[8] & (D1L161 # D1L162);


--D1_Cur_Color_B[9] is VGA_Controller:u1|Cur_Color_B[9]
D1_Cur_Color_B[9] = DFFEAS(mVGA_B[9], E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--D1L149 is VGA_Controller:u1|oVGA_B[9]~63
D1L149 = D1L159 & D1_Cur_Color_B[9] & (D1L161 # D1L162);


--sum[0] is sum[0]
sum[0] = DFFEAS(A1L700, E1__clk0,  ,  , A1L709,  ,  , state.test1,  );


--state.test5 is state.test5
state.test5 = DFFEAS(A1L685, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L640 is led[0]~43
A1L640 = KEY[3] & KEY[0] & (!D1_oVGA_V_SYNC # !D1_oVGA_H_SYNC);


--A1L639 is led[0]~7
A1L639 = state.test5 & A1L640;


--sum[1] is sum[1]
sum[1] = DFFEAS(A1L703, E1__clk0,  ,  , A1L709,  ,  , state.test1,  );


--sum[2] is sum[2]
sum[2] = DFFEAS(A1L706, E1__clk0,  ,  , A1L709,  ,  , state.test1,  );


--sum[3] is sum[3]
sum[3] = DFFEAS(A1L710, E1__clk0,  ,  , A1L709,  ,  , state.test1,  );


--y_walker[0] is y_walker[0]
y_walker[0] = DFFEAS(A1L414, E1__clk0,  ,  , A1L873,  ,  , !KEY[0],  );


--A1L553 is add~627
A1L553 = y_walker[0] $ VCC;

--A1L554 is add~628
A1L554 = CARRY(y_walker[0]);


--state.test4 is state.test4
state.test4 = DFFEAS(A1L686, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L505 is addr_reg[9]~662
A1L505 = A1L640 & !state.test4;


--state.test3 is state.test3
state.test3 = DFFEAS(A1L687, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L500 is addr_reg[8]~663
A1L500 = state.test3 & !state.test4 # !A1L640;


--state.draw_walker is state.draw_walker
state.draw_walker = DFFEAS(A1L689, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--state.test2 is state.test2
state.test2 = DFFEAS(A1L690, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--state.test1 is state.test1
state.test1 = DFFEAS(A1L692, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L501 is addr_reg[8]~664
A1L501 = state.test2 # state.test1;


--A1L502 is addr_reg[8]~665
A1L502 = A1L505 & (A1L500 # state.draw_walker # A1L501);


--A1L555 is add~629
A1L555 = y_walker[0] $ VCC;

--A1L556 is add~630
A1L556 = CARRY(y_walker[0]);


--D1_oCoord_Y[1] is VGA_Controller:u1|oCoord_Y[1]
D1_oCoord_Y[1] = DFFEAS(D1L119, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L535 is addr_reg~666
A1L535 = A1L505 & (A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[1]) # !A1L500 & A1L555);


--A1L534 is addr_reg~35
A1L534 = A1L502 & (A1L535 & (A1L553) # !A1L535 & y_walker[0]) # !A1L502 & (A1L535);


--state.test6 is state.test6
state.test6 = DFFEAS(A1L693, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--state.update_walker is state.update_walker
state.update_walker = DFFEAS(A1L695, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--state.new_walker is state.new_walker
state.new_walker = DFFEAS(A1L696, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L410 is Select~2521
A1L410 = !state.update_walker & !state.new_walker;


--A1L503 is addr_reg[8]~667
A1L503 = !state.test5 & !state.test6 & A1L410 # !A1L640;


--y_walker[1] is y_walker[1]
y_walker[1] = DFFEAS(A1L878, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L557 is add~631
A1L557 = y_walker[1] & A1L554 & VCC # !y_walker[1] & !A1L554;

--A1L558 is add~632
A1L558 = CARRY(!y_walker[1] & !A1L554);


--A1L559 is add~633
A1L559 = y_walker[1] & !A1L556 # !y_walker[1] & (A1L556 # GND);

--A1L560 is add~634
A1L560 = CARRY(!A1L556 # !y_walker[1]);


--D1_oCoord_Y[2] is VGA_Controller:u1|oCoord_Y[2]
D1_oCoord_Y[2] = DFFEAS(D1L122, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L536 is addr_reg~668
A1L536 = A1L505 & (A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[2]) # !A1L500 & A1L559);


--A1L533 is addr_reg~34
A1L533 = A1L502 & (A1L536 & (A1L557) # !A1L536 & y_walker[1]) # !A1L502 & (A1L536);


--y_walker[2] is y_walker[2]
y_walker[2] = DFFEAS(A1L879, E1__clk0,  ,  , A1L865, y_rand[28],  , !KEY[0], state.new_walker);


--A1L561 is add~635
A1L561 = y_walker[2] & (GND # !A1L558) # !y_walker[2] & (A1L558 $ GND);

--A1L562 is add~636
A1L562 = CARRY(y_walker[2] # !A1L558);


--A1L563 is add~637
A1L563 = y_walker[2] & (A1L560 $ GND) # !y_walker[2] & !A1L560 & VCC;

--A1L564 is add~638
A1L564 = CARRY(y_walker[2] & !A1L560);


--D1_oCoord_Y[3] is VGA_Controller:u1|oCoord_Y[3]
D1_oCoord_Y[3] = DFFEAS(D1L125, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L537 is addr_reg~669
A1L537 = A1L505 & (A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[3]) # !A1L500 & A1L563);


--A1L532 is addr_reg~33
A1L532 = A1L502 & (A1L537 & (A1L561) # !A1L537 & y_walker[2]) # !A1L502 & (A1L537);


--y_walker[3] is y_walker[3]
y_walker[3] = DFFEAS(A1L881, E1__clk0,  ,  , A1L865, VCC,  ,  , !KEY[0]);


--A1L565 is add~639
A1L565 = y_walker[3] & A1L562 & VCC # !y_walker[3] & !A1L562;

--A1L566 is add~640
A1L566 = CARRY(!y_walker[3] & !A1L562);


--A1L567 is add~641
A1L567 = y_walker[3] & !A1L564 # !y_walker[3] & (A1L564 # GND);

--A1L568 is add~642
A1L568 = CARRY(!A1L564 # !y_walker[3]);


--D1_oCoord_Y[4] is VGA_Controller:u1|oCoord_Y[4]
D1_oCoord_Y[4] = DFFEAS(D1L128, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L538 is addr_reg~670
A1L538 = A1L505 & (!A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[4]) # !A1L500 & A1L567);


--A1L531 is addr_reg~32
A1L531 = A1L502 & (A1L538 & y_walker[3] # !A1L538 & (A1L565)) # !A1L502 & (A1L538);


--y_walker[4] is y_walker[4]
y_walker[4] = DFFEAS(A1L418, E1__clk0,  ,  , A1L873, VCC,  ,  , !KEY[0]);


--A1L569 is add~643
A1L569 = y_walker[4] & (GND # !A1L566) # !y_walker[4] & (A1L566 $ GND);

--A1L570 is add~644
A1L570 = CARRY(y_walker[4] # !A1L566);


--A1L571 is add~645
A1L571 = y_walker[4] & (A1L568 $ GND) # !y_walker[4] & !A1L568 & VCC;

--A1L572 is add~646
A1L572 = CARRY(y_walker[4] & !A1L568);


--D1_oCoord_Y[5] is VGA_Controller:u1|oCoord_Y[5]
D1_oCoord_Y[5] = DFFEAS(D1L131, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L539 is addr_reg~671
A1L539 = A1L505 & (!A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[5]) # !A1L500 & A1L571);


--A1L530 is addr_reg~31
A1L530 = A1L502 & (A1L539 & y_walker[4] # !A1L539 & (A1L569)) # !A1L502 & (A1L539);


--y_walker[5] is y_walker[5]
y_walker[5] = DFFEAS(A1L883, E1__clk0,  ,  , A1L865, VCC,  ,  , !KEY[0]);


--A1L573 is add~647
A1L573 = y_walker[5] & A1L570 & VCC # !y_walker[5] & !A1L570;

--A1L574 is add~648
A1L574 = CARRY(!y_walker[5] & !A1L570);


--A1L575 is add~649
A1L575 = y_walker[5] & !A1L572 # !y_walker[5] & (A1L572 # GND);

--A1L576 is add~650
A1L576 = CARRY(!A1L572 # !y_walker[5]);


--D1_oCoord_Y[6] is VGA_Controller:u1|oCoord_Y[6]
D1_oCoord_Y[6] = DFFEAS(D1L134, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L540 is addr_reg~672
A1L540 = A1L505 & (!A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[6]) # !A1L500 & A1L575);


--A1L529 is addr_reg~30
A1L529 = A1L502 & (A1L540 & y_walker[5] # !A1L540 & (A1L573)) # !A1L502 & (A1L540);


--y_walker[6] is y_walker[6]
y_walker[6] = DFFEAS(A1L885, E1__clk0,  ,  , A1L865, VCC,  ,  , !KEY[0]);


--A1L577 is add~651
A1L577 = y_walker[6] & (GND # !A1L574) # !y_walker[6] & (A1L574 $ GND);

--A1L578 is add~652
A1L578 = CARRY(y_walker[6] # !A1L574);


--A1L579 is add~653
A1L579 = y_walker[6] & (A1L576 $ GND) # !y_walker[6] & !A1L576 & VCC;

--A1L580 is add~654
A1L580 = CARRY(y_walker[6] & !A1L576);


--D1_oCoord_Y[7] is VGA_Controller:u1|oCoord_Y[7]
D1_oCoord_Y[7] = DFFEAS(D1L137, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L541 is addr_reg~673
A1L541 = A1L505 & (!A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[7]) # !A1L500 & A1L579);


--A1L528 is addr_reg~29
A1L528 = A1L502 & (A1L541 & y_walker[6] # !A1L541 & (A1L577)) # !A1L502 & (A1L541);


--y_walker[7] is y_walker[7]
y_walker[7] = DFFEAS(A1L886, E1__clk0,  ,  , A1L865, y_rand[28],  , !KEY[0], state.new_walker);


--A1L581 is add~655
A1L581 = y_walker[7] & A1L578 & VCC # !y_walker[7] & !A1L578;

--A1L582 is add~656
A1L582 = CARRY(!y_walker[7] & !A1L578);


--A1L583 is add~657
A1L583 = y_walker[7] & !A1L580 # !y_walker[7] & (A1L580 # GND);

--A1L584 is add~658
A1L584 = CARRY(!A1L580 # !y_walker[7]);


--D1_oCoord_Y[8] is VGA_Controller:u1|oCoord_Y[8]
D1_oCoord_Y[8] = DFFEAS(D1L140, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L542 is addr_reg~674
A1L542 = A1L505 & (A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[8]) # !A1L500 & A1L583);


--A1L527 is addr_reg~28
A1L527 = A1L502 & (A1L542 & (A1L581) # !A1L542 & y_walker[7]) # !A1L502 & (A1L542);


--y_walker[8] is y_walker[8]
y_walker[8] = DFFEAS(A1L421, E1__clk0,  ,  , A1L873,  ,  , !KEY[0],  );


--A1L585 is add~659
A1L585 = y_walker[8] $ A1L582;


--A1L587 is add~661
A1L587 = y_walker[8] $ !A1L584;


--D1_oCoord_Y[9] is VGA_Controller:u1|oCoord_Y[9]
D1_oCoord_Y[9] = DFFEAS(D1L143, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L543 is addr_reg~675
A1L543 = A1L505 & (A1L500) # !A1L505 & (A1L500 & (D1_oCoord_Y[9]) # !A1L500 & A1L587);


--A1L526 is addr_reg~27
A1L526 = A1L502 & (A1L543 & (A1L585) # !A1L543 & y_walker[8]) # !A1L502 & (A1L543);


--x_walker[0] is x_walker[0]
x_walker[0] = DFFEAS(A1L426, E1__clk0,  ,  , A1L873, VCC,  ,  , !KEY[0]);


--A1L589 is add~663
A1L589 = x_walker[0] $ VCC;

--A1L590 is add~664
A1L590 = CARRY(x_walker[0]);


--A1L591 is add~665
A1L591 = x_walker[0] $ VCC;

--A1L592 is add~666
A1L592 = CARRY(x_walker[0]);


--A1L506 is addr_reg[9]~676
A1L506 = A1L640 & !state.test4 & !state.test3 & !state.draw_walker;


--A1L507 is addr_reg[9]~677
A1L507 = A1L506 & (state.test2 # state.test1 # !A1L640);


--D1_oCoord_X[1] is VGA_Controller:u1|oCoord_X[1]
D1_oCoord_X[1] = DFFEAS(D1L92, E1__clk0, C1_oRESET,  ,  ,  ,  ,  ,  );


--A1L508 is addr_reg[9]~678
A1L508 = state.test2 & A1L506 # !A1L640;


--A1L544 is addr_reg~679
A1L544 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[1]) # !A1L508 & x_walker[0]);


--A1L525 is addr_reg~26
A1L525 = A1L507 & (A1L544 & (A1L591) # !A1L544 & A1L589) # !A1L507 & (A1L544);


--x_walker[1] is x_walker[1]
x_walker[1] = DFFEAS(A1L791, E1__clk0,  ,  ,  , VCC,  ,  , !KEY[0]);


--A1L593 is add~667
A1L593 = x_walker[1] & A1L590 & VCC # !x_walker[1] & !A1L590;

--A1L594 is add~668
A1L594 = CARRY(!x_walker[1] & !A1L590);


--A1L595 is add~669
A1L595 = x_walker[1] & !A1L592 # !x_walker[1] & (A1L592 # GND);

--A1L596 is add~670
A1L596 = CARRY(!A1L592 # !x_walker[1]);


--D1_oCoord_X[2] is VGA_Controller:u1|oCoord_X[2]
D1_oCoord_X[2] = DFFEAS(D1L94, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L545 is addr_reg~680
A1L545 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[2]) # !A1L508 & x_walker[1]);


--A1L524 is addr_reg~25
A1L524 = A1L507 & (A1L545 & (A1L595) # !A1L545 & A1L593) # !A1L507 & (A1L545);


--x_walker[2] is x_walker[2]
x_walker[2] = DFFEAS(A1L792, E1__clk0,  ,  , A1L789, x_rand[30],  , !KEY[0], state.new_walker);


--A1L597 is add~671
A1L597 = x_walker[2] & (GND # !A1L594) # !x_walker[2] & (A1L594 $ GND);

--A1L598 is add~672
A1L598 = CARRY(x_walker[2] # !A1L594);


--A1L599 is add~673
A1L599 = x_walker[2] & (A1L596 $ GND) # !x_walker[2] & !A1L596 & VCC;

--A1L600 is add~674
A1L600 = CARRY(x_walker[2] & !A1L596);


--D1_oCoord_X[3] is VGA_Controller:u1|oCoord_X[3]
D1_oCoord_X[3] = DFFEAS(D1L97, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L546 is addr_reg~681
A1L546 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[3]) # !A1L508 & x_walker[2]);


--A1L523 is addr_reg~24
A1L523 = A1L507 & (A1L546 & (A1L599) # !A1L546 & A1L597) # !A1L507 & (A1L546);


--x_walker[3] is x_walker[3]
x_walker[3] = DFFEAS(A1L794, E1__clk0,  ,  , A1L789, VCC,  ,  , !KEY[0]);


--A1L601 is add~675
A1L601 = x_walker[3] & A1L598 & VCC # !x_walker[3] & !A1L598;

--A1L602 is add~676
A1L602 = CARRY(!x_walker[3] & !A1L598);


--A1L603 is add~677
A1L603 = x_walker[3] & !A1L600 # !x_walker[3] & (A1L600 # GND);

--A1L604 is add~678
A1L604 = CARRY(!A1L600 # !x_walker[3]);


--D1_oCoord_X[4] is VGA_Controller:u1|oCoord_X[4]
D1_oCoord_X[4] = DFFEAS(D1L100, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L547 is addr_reg~682
A1L547 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[4]) # !A1L508 & x_walker[3]);


--A1L522 is addr_reg~23
A1L522 = A1L507 & (A1L547 & (A1L603) # !A1L547 & A1L601) # !A1L507 & (A1L547);


--x_walker[4] is x_walker[4]
x_walker[4] = DFFEAS(A1L796, E1__clk0,  ,  , A1L789, VCC,  ,  , !KEY[0]);


--A1L605 is add~679
A1L605 = x_walker[4] & (GND # !A1L602) # !x_walker[4] & (A1L602 $ GND);

--A1L606 is add~680
A1L606 = CARRY(x_walker[4] # !A1L602);


--A1L607 is add~681
A1L607 = x_walker[4] & (A1L604 $ GND) # !x_walker[4] & !A1L604 & VCC;

--A1L608 is add~682
A1L608 = CARRY(x_walker[4] & !A1L604);


--D1_oCoord_X[5] is VGA_Controller:u1|oCoord_X[5]
D1_oCoord_X[5] = DFFEAS(D1L103, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L548 is addr_reg~683
A1L548 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[5]) # !A1L508 & x_walker[4]);


--A1L521 is addr_reg~22
A1L521 = A1L507 & (A1L548 & (A1L607) # !A1L548 & A1L605) # !A1L507 & (A1L548);


--x_walker[5] is x_walker[5]
x_walker[5] = DFFEAS(A1L797, E1__clk0,  ,  , A1L789, x_rand[30],  , !KEY[0], state.new_walker);


--A1L609 is add~683
A1L609 = x_walker[5] & A1L606 & VCC # !x_walker[5] & !A1L606;

--A1L610 is add~684
A1L610 = CARRY(!x_walker[5] & !A1L606);


--A1L611 is add~685
A1L611 = x_walker[5] & !A1L608 # !x_walker[5] & (A1L608 # GND);

--A1L612 is add~686
A1L612 = CARRY(!A1L608 # !x_walker[5]);


--D1_oCoord_X[6] is VGA_Controller:u1|oCoord_X[6]
D1_oCoord_X[6] = DFFEAS(D1L106, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L549 is addr_reg~684
A1L549 = A1L506 & (!A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[6]) # !A1L508 & x_walker[5]);


--A1L520 is addr_reg~21
A1L520 = A1L507 & (A1L549 & A1L609 # !A1L549 & (A1L611)) # !A1L507 & (A1L549);


--x_walker[6] is x_walker[6]
x_walker[6] = DFFEAS(A1L432, E1__clk0,  ,  , A1L873,  ,  , !KEY[0],  );


--A1L613 is add~687
A1L613 = x_walker[6] & (GND # !A1L610) # !x_walker[6] & (A1L610 $ GND);

--A1L614 is add~688
A1L614 = CARRY(x_walker[6] # !A1L610);


--A1L615 is add~689
A1L615 = x_walker[6] & (A1L612 $ GND) # !x_walker[6] & !A1L612 & VCC;

--A1L616 is add~690
A1L616 = CARRY(x_walker[6] & !A1L612);


--D1_oCoord_X[7] is VGA_Controller:u1|oCoord_X[7]
D1_oCoord_X[7] = DFFEAS(D1L109, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L550 is addr_reg~685
A1L550 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[7]) # !A1L508 & x_walker[6]);


--A1L519 is addr_reg~20
A1L519 = A1L507 & (A1L550 & (A1L615) # !A1L550 & A1L613) # !A1L507 & (A1L550);


--x_walker[7] is x_walker[7]
x_walker[7] = DFFEAS(A1L433, E1__clk0,  ,  , A1L873, VCC,  ,  , !KEY[0]);


--A1L617 is add~691
A1L617 = x_walker[7] & A1L614 & VCC # !x_walker[7] & !A1L614;

--A1L618 is add~692
A1L618 = CARRY(!x_walker[7] & !A1L614);


--A1L619 is add~693
A1L619 = x_walker[7] & !A1L616 # !x_walker[7] & (A1L616 # GND);

--A1L620 is add~694
A1L620 = CARRY(!A1L616 # !x_walker[7]);


--D1_oCoord_X[8] is VGA_Controller:u1|oCoord_X[8]
D1_oCoord_X[8] = DFFEAS(D1L112, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L551 is addr_reg~686
A1L551 = A1L506 & (!A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[8]) # !A1L508 & x_walker[7]);


--A1L518 is addr_reg~19
A1L518 = A1L507 & (A1L551 & A1L617 # !A1L551 & (A1L619)) # !A1L507 & (A1L551);


--x_walker[8] is x_walker[8]
x_walker[8] = DFFEAS(A1L798, E1__clk0,  ,  , A1L789, x_rand[30],  , !KEY[0], state.new_walker);


--A1L621 is add~695
A1L621 = x_walker[8] $ A1L618;


--A1L623 is add~697
A1L623 = x_walker[8] $ !A1L620;


--D1_oCoord_X[9] is VGA_Controller:u1|oCoord_X[9]
D1_oCoord_X[9] = DFFEAS(D1L115, E1__clk0, C1_oRESET,  , D1L89,  ,  ,  ,  );


--A1L552 is addr_reg~687
A1L552 = A1L506 & (A1L508) # !A1L506 & (A1L508 & (D1_oCoord_X[9]) # !A1L508 & x_walker[8]);


--A1L517 is addr_reg~18
A1L517 = A1L507 & (A1L552 & (A1L623) # !A1L552 & A1L621) # !A1L507 & (A1L552);


--A1L625 is always0~1
A1L625 = D1_oVGA_H_SYNC & D1_oVGA_V_SYNC # !KEY[3];


--state.init is state.init
state.init = DFFEAS(A1L697, E1__clk0,  ,  ,  ,  ,  ,  ,  );


--A1L635 is data_reg~143
A1L635 = state.init & !state.draw_walker;


--A1L713 is we~21
A1L713 = A1L625 # state.test6 & we # !state.test6 & (A1L635);


--C1_oRESET is Reset_Delay:r0|oRESET
C1_oRESET = DFFEAS(A1L674, CLOCK_50,  ,  ,  ,  ,  ,  ,  );


--A1L665 is rtl~191
A1L665 = !D1_H_Cont[8] & !D1_H_Cont[9];


--D1L51 is VGA_Controller:u1|LessThan~1042
D1L51 = D1_H_Cont[7] # D1_H_Cont[5] & D1_H_Cont[6] # !A1L665;


--A1L666 is rtl~192
A1L666 = A1L664 & !D1_H_Cont[4] & !D1_H_Cont[2] & !D1_H_Cont[3];


--A1L667 is rtl~193
A1L667 = A1L662 & A1L666 & !D1_H_Cont[8] & !D1_H_Cont[9];


--D1L164 is VGA_Controller:u1|oVGA_V_SYNC~174
D1L164 = A1L667 & (D1_V_Cont[9] # D1L50) # !A1L667 & D1_oVGA_V_SYNC;


--D1_V_Cont[0] is VGA_Controller:u1|V_Cont[0]
D1_V_Cont[0] = DFFEAS(D1L58, E1__clk0, C1_oRESET,  , A1L667,  ,  , D1L54,  );


--D1L58 is VGA_Controller:u1|V_Cont[0]~256
D1L58 = D1_V_Cont[0] $ VCC;

--D1L59 is VGA_Controller:u1|V_Cont[0]~257
D1L59 = CARRY(D1_V_Cont[0]);


--D1L61 is VGA_Controller:u1|V_Cont[1]~258
D1L61 = D1_V_Cont[1] & !D1L59 # !D1_V_Cont[1] & (D1L59 # GND);

--D1L62 is VGA_Controller:u1|V_Cont[1]~259
D1L62 = CARRY(!D1L59 # !D1_V_Cont[1]);


--D1L64 is VGA_Controller:u1|V_Cont[2]~260
D1L64 = D1_V_Cont[2] & (D1L62 $ GND) # !D1_V_Cont[2] & !D1L62 & VCC;

--D1L65 is VGA_Controller:u1|V_Cont[2]~261
D1L65 = CARRY(D1_V_Cont[2] & !D1L62);


--D1L67 is VGA_Controller:u1|V_Cont[3]~262
D1L67 = D1_V_Cont[3] & !D1L65 # !D1_V_Cont[3] & (D1L65 # GND);

--D1L68 is VGA_Controller:u1|V_Cont[3]~263
D1L68 = CARRY(!D1L65 # !D1_V_Cont[3]);


--D1L70 is VGA_Controller:u1|V_Cont[4]~264
D1L70 = D1_V_Cont[4] & (D1L68 $ GND) # !D1_V_Cont[4] & !D1L68 & VCC;

--D1L71 is VGA_Controller:u1|V_Cont[4]~265
D1L71 = CARRY(D1_V_Cont[4] & !D1L68);


--D1L73 is VGA_Controller:u1|V_Cont[5]~266
D1L73 = D1_V_Cont[5] & !D1L71 # !D1_V_Cont[5] & (D1L71 # GND);

--D1L74 is VGA_Controller:u1|V_Cont[5]~267
D1L74 = CARRY(!D1L71 # !D1_V_Cont[5]);


--D1L76 is VGA_Controller:u1|V_Cont[6]~268
D1L76 = D1_V_Cont[6] & (D1L74 $ GND) # !D1_V_Cont[6] & !D1L74 & VCC;

--D1L77 is VGA_Controller:u1|V_Cont[6]~269
D1L77 = CARRY(D1_V_Cont[6] & !D1L74);


--D1L52 is VGA_Controller:u1|LessThan~1043
D1L52 = D1L47 & !D1_V_Cont[4] & !D1_V_Cont[5];


--D1L53 is VGA_Controller:u1|LessThan~1044
D1L53 = !D1_V_Cont[1] & !D1_V_Cont[0] # !D1_V_Cont[3] # !D1_V_Cont[2];


--D1L54 is VGA_Controller:u1|LessThan~1045
D1L54 = D1_V_Cont[9] & (!D1L53 # !D1L52);


--D1L79 is VGA_Controller:u1|V_Cont[7]~270
D1L79 = D1_V_Cont[7] & !D1L77 # !D1_V_Cont[7] & (D1L77 # GND);

--D1L80 is VGA_Controller:u1|V_Cont[7]~271
D1L80 = CARRY(!D1L77 # !D1_V_Cont[7]);


--D1L82 is VGA_Controller:u1|V_Cont[8]~272
D1L82 = D1_V_Cont[8] & (D1L80 $ GND) # !D1_V_Cont[8] & !D1L80 & VCC;

--D1L83 is VGA_Controller:u1|V_Cont[8]~273
D1L83 = CARRY(D1_V_Cont[8] & !D1L80);


--D1L85 is VGA_Controller:u1|V_Cont[9]~274
D1L85 = D1_V_Cont[9] $ D1L83;


--D1L18 is VGA_Controller:u1|H_Cont[0]~239
D1L18 = D1_H_Cont[0] $ VCC;

--D1L19 is VGA_Controller:u1|H_Cont[0]~240
D1L19 = CARRY(D1_H_Cont[0]);


--D1L21 is VGA_Controller:u1|H_Cont[1]~241
D1L21 = D1_H_Cont[1] & !D1L19 # !D1_H_Cont[1] & (D1L19 # GND);

--D1L22 is VGA_Controller:u1|H_Cont[1]~242
D1L22 = CARRY(!D1L19 # !D1_H_Cont[1]);


--D1L24 is VGA_Controller:u1|H_Cont[2]~243
D1L24 = D1_H_Cont[2] & (D1L22 $ GND) # !D1_H_Cont[2] & !D1L22 & VCC;

--D1L25 is VGA_Controller:u1|H_Cont[2]~244
D1L25 = CARRY(D1_H_Cont[2] & !D1L22);


--D1L27 is VGA_Controller:u1|H_Cont[3]~245
D1L27 = D1_H_Cont[3] & !D1L25 # !D1_H_Cont[3] & (D1L25 # GND);

--D1L28 is VGA_Controller:u1|H_Cont[3]~246
D1L28 = CARRY(!D1L25 # !D1_H_Cont[3]);


--D1L30 is VGA_Controller:u1|H_Cont[4]~247
D1L30 = D1_H_Cont[4] & (D1L28 $ GND) # !D1_H_Cont[4] & !D1L28 & VCC;

--D1L31 is VGA_Controller:u1|H_Cont[4]~248
D1L31 = CARRY(D1_H_Cont[4] & !D1L28);


--D1L33 is VGA_Controller:u1|H_Cont[5]~249
D1L33 = D1_H_Cont[5] & !D1L31 # !D1_H_Cont[5] & (D1L31 # GND);

--D1L34 is VGA_Controller:u1|H_Cont[5]~250
D1L34 = CARRY(!D1L31 # !D1_H_Cont[5]);


--D1L36 is VGA_Controller:u1|H_Cont[6]~251
D1L36 = D1_H_Cont[6] & (D1L34 $ GND) # !D1_H_Cont[6] & !D1L34 & VCC;

--D1L37 is VGA_Controller:u1|H_Cont[6]~252
D1L37 = CARRY(D1_H_Cont[6] & !D1L34);


--D1L39 is VGA_Controller:u1|H_Cont[7]~253
D1L39 = D1_H_Cont[7] & !D1L37 # !D1_H_Cont[7] & (D1L37 # GND);

--D1L40 is VGA_Controller:u1|H_Cont[7]~254
D1L40 = CARRY(!D1L37 # !D1_H_Cont[7]);


--D1L55 is VGA_Controller:u1|LessThan~1046
D1L55 = !A1L664 & D1_H_Cont[8] & D1_H_Cont[9];


--D1L42 is VGA_Controller:u1|H_Cont[8]~255
D1L42 = D1_H_Cont[8] & (D1L40 $ GND) # !D1_H_Cont[8] & !D1L40 & VCC;

--D1L43 is VGA_Controller:u1|H_Cont[8]~256
D1L43 = CARRY(D1_H_Cont[8] & !D1L40);


--D1L45 is VGA_Controller:u1|H_Cont[9]~257
D1L45 = D1_H_Cont[9] $ D1L43;


--A1L700 is sum[0]~108
A1L700 = mVGA_R[9] & (sum[0] $ VCC) # !mVGA_R[9] & sum[0] & VCC;

--A1L701 is sum[0]~109
A1L701 = CARRY(mVGA_R[9] & sum[0]);


--A1L709 is sum[3]~110
A1L709 = A1L640 & A1L410 & A1L635 & !state.test6;


--A1L685 is state~1444
A1L685 = KEY[0] & (A1L625 & state.test5 # !A1L625 & (state.test4));


--A1L703 is sum[1]~111
A1L703 = sum[1] & !A1L701 # !sum[1] & (A1L701 # GND);

--A1L704 is sum[1]~112
A1L704 = CARRY(!A1L701 # !sum[1]);


--A1L706 is sum[2]~113
A1L706 = sum[2] & (A1L704 $ GND) # !sum[2] & !A1L704 & VCC;

--A1L707 is sum[2]~114
A1L707 = CARRY(sum[2] & !A1L704);


--A1L710 is sum[3]~115
A1L710 = sum[3] $ A1L707;


--y_rand[28] is y_rand[28]
y_rand[28] = DFFEAS(A1L832, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L300 is LessThan~531
A1L300 = !y_walker[7] # !y_walker[6] # !y_walker[5];


--A1L301 is LessThan~532
A1L301 = !y_walker[0] & !y_walker[1] # !y_walker[3] # !y_walker[2];


--A1L629 is always0~235
A1L629 = !y_walker[8] & (A1L300 # A1L301 & !y_walker[4]);


--A1L411 is Select~2522
A1L411 = state.update_walker & y_rand[28] & A1L629;


--A1L412 is Select~2523
A1L412 = y_walker[0] & (A1L410 # A1L555 & A1L411) # !y_walker[0] & A1L555 & A1L411;


--A1L302 is LessThan~533
A1L302 = y_walker[2] # y_walker[3] # y_walker[0] & y_walker[1];


--A1L303 is LessThan~534
A1L303 = y_walker[4] # y_walker[5] # y_walker[6] # y_walker[7];


--A1L628 is always0~6
A1L628 = !y_rand[28] & (y_walker[8] # A1L302 # A1L303);


--A1L413 is Select~2524
A1L413 = A1L628 & A1L553 # !A1L628 & (y_walker[0]);


--A1L630 is always0~236
A1L630 = y_rand[28] & A1L629;


--A1L414 is Select~2525
A1L414 = A1L412 # state.update_walker & A1L413 & !A1L630;


--A1L873 is y_walker[8]~1931
A1L873 = KEY[3] & (!D1_oVGA_V_SYNC # !D1_oVGA_H_SYNC) # !KEY[0];


--A1L686 is state~1445
A1L686 = KEY[0] & (A1L625 & state.test4 # !A1L625 & (state.test3));


--A1L687 is state~1446
A1L687 = KEY[0] & (A1L625 & state.test3 # !A1L625 & (state.test2));


--lock is lock
lock = DFFEAS(A1L645, E1__clk0,  ,  , KEY[0],  ,  ,  ,  );


--A1L631 is always0~237
A1L631 = sum[0] # sum[1];


--A1L632 is always0~238
A1L632 = lock & (sum[2] # sum[3] # A1L631);


--A1L688 is state~1447
A1L688 = A1L640 & state.test6;


--A1L689 is state~1448
A1L689 = state.draw_walker & (A1L632 & A1L688 # !A1L873) # !state.draw_walker & A1L632 & A1L688;


--A1L690 is state~1449
A1L690 = KEY[0] & (A1L625 & state.test2 # !A1L625 & (state.test1));


--A1L691 is state~1450
A1L691 = state.update_walker # state.new_walker # !state.init;


--A1L692 is state~1451
A1L692 = KEY[0] & (A1L625 & state.test1 # !A1L625 & (A1L691));


--D1L119 is VGA_Controller:u1|oCoord_Y[1]~81
D1L119 = D1_V_Cont[1] $ VCC;

--D1L120 is VGA_Controller:u1|oCoord_Y[1]~82
D1L120 = CARRY(D1_V_Cont[1]);


--D1L87 is VGA_Controller:u1|always0~207
D1L87 = D1_H_Cont[4] & (D1_H_Cont[2] # D1_H_Cont[3]);


--D1L88 is VGA_Controller:u1|always0~208
D1L88 = D1_H_Cont[7] & !D1_H_Cont[8] & (D1L87 # !A1L663) # !D1_H_Cont[7] & A1L663 & !D1L87 & D1_H_Cont[8];


--D1L89 is VGA_Controller:u1|always0~209
D1L89 = D1L159 & (D1L88 # D1_H_Cont[8] $ D1_H_Cont[9]);


--A1L693 is state~1452
A1L693 = KEY[0] & (A1L625 & state.test6 # !A1L625 & (state.test5));


--A1L694 is state~1453
A1L694 = KEY[0] & state.update_walker;


--A1L695 is state~1454
A1L695 = A1L625 & (A1L694 # A1L688 & !A1L632) # !A1L625 & (A1L688 & !A1L632);


--A1L696 is state~1455
A1L696 = KEY[0] & (A1L625 & state.new_walker # !A1L625 & (state.draw_walker));


--A1L874 is y_walker~1932
A1L874 = A1L628 & (A1L557 & !A1L625) # !A1L628 & y_walker[1];


--A1L415 is Select~2526
A1L415 = state.update_walker # state.new_walker # y_walker[1];


--A1L875 is y_walker~1933
A1L875 = KEY[0] & A1L874 & A1L415 & !A1L630;


--A1L876 is y_walker~1934
A1L876 = KEY[0] & !A1L625 & (y_walker[1] # !A1L410);


--A1L877 is y_walker~1935
A1L877 = A1L876 & (A1L559 & A1L630 # !state.update_walker);


--A1L878 is y_walker~1936
A1L878 = A1L875 # A1L877 # y_walker[1] & !A1L873;


--D1L122 is VGA_Controller:u1|oCoord_Y[2]~83
D1L122 = D1_V_Cont[2] & D1L120 & VCC # !D1_V_Cont[2] & !D1L120;

--D1L123 is VGA_Controller:u1|oCoord_Y[2]~84
D1L123 = CARRY(!D1_V_Cont[2] & !D1L120);


--A1L879 is y_walker~1937
A1L879 = y_rand[28] & (A1L629 & A1L563 # !A1L629 & (A1L561)) # !y_rand[28] & (A1L561);


--A1L304 is LessThan~535
A1L304 = y_walker[8] # A1L302 # A1L303;


--A1L864 is y_walker[2]~1938
A1L864 = A1L694 & !y_rand[28] & !A1L304 # !A1L866;


--A1L865 is y_walker[2]~1939
A1L865 = !A1L864 & (A1L629 # !A1L694 # !y_rand[28]);


--D1L125 is VGA_Controller:u1|oCoord_Y[3]~85
D1L125 = D1_V_Cont[3] & (GND # !D1L123) # !D1_V_Cont[3] & (D1L123 $ GND);

--D1L126 is VGA_Controller:u1|oCoord_Y[3]~86
D1L126 = CARRY(D1_V_Cont[3] # !D1L123);


--A1L880 is y_walker~1940
A1L880 = y_rand[28] & (state.new_walker # A1L567 & A1L629);


--A1L881 is y_walker~1941
A1L881 = A1L880 # A1L565 & !state.new_walker & !A1L630;


--D1L128 is VGA_Controller:u1|oCoord_Y[4]~87
D1L128 = D1_V_Cont[4] & D1L126 & VCC # !D1_V_Cont[4] & !D1L126;

--D1L129 is VGA_Controller:u1|oCoord_Y[4]~88
D1L129 = CARRY(!D1_V_Cont[4] & !D1L126);


--A1L416 is Select~2527
A1L416 = A1L410 & (y_walker[4] # A1L571 & A1L411) # !A1L410 & A1L571 & A1L411;


--A1L417 is Select~2528
A1L417 = y_rand[28] & y_walker[4] # !y_rand[28] & (A1L569 & A1L304);


--A1L418 is Select~2529
A1L418 = A1L416 # state.update_walker & A1L417 & !A1L630;


--D1L131 is VGA_Controller:u1|oCoord_Y[5]~89
D1L131 = D1_V_Cont[5] & (D1L129 $ GND) # !D1_V_Cont[5] & !D1L129 & VCC;

--D1L132 is VGA_Controller:u1|oCoord_Y[5]~90
D1L132 = CARRY(D1_V_Cont[5] & !D1L129);


--A1L882 is y_walker~1942
A1L882 = state.new_walker & y_rand[28] # !state.new_walker & A1L573 & (!A1L629 # !y_rand[28]);


--A1L883 is y_walker~1943
A1L883 = A1L882 # A1L575 & A1L630 & !state.new_walker;


--D1L134 is VGA_Controller:u1|oCoord_Y[6]~91
D1L134 = D1_V_Cont[6] & D1L132 & VCC # !D1_V_Cont[6] & !D1L132;

--D1L135 is VGA_Controller:u1|oCoord_Y[6]~92
D1L135 = CARRY(!D1_V_Cont[6] & !D1L132);


--A1L884 is y_walker~1944
A1L884 = state.new_walker & y_rand[28] # !state.new_walker & A1L577 & (!A1L629 # !y_rand[28]);


--A1L885 is y_walker~1945
A1L885 = A1L884 # A1L579 & A1L630 & !state.new_walker;


--D1L137 is VGA_Controller:u1|oCoord_Y[7]~93
D1L137 = D1_V_Cont[7] & (GND # !D1L135) # !D1_V_Cont[7] & (D1L135 $ GND);

--D1L138 is VGA_Controller:u1|oCoord_Y[7]~94
D1L138 = CARRY(D1_V_Cont[7] # !D1L135);


--A1L886 is y_walker~1946
A1L886 = y_rand[28] & (A1L629 & A1L583 # !A1L629 & (A1L581)) # !y_rand[28] & (A1L581);


--D1L140 is VGA_Controller:u1|oCoord_Y[8]~95
D1L140 = D1_V_Cont[8] & D1L138 & VCC # !D1_V_Cont[8] & !D1L138;

--D1L141 is VGA_Controller:u1|oCoord_Y[8]~96
D1L141 = CARRY(!D1_V_Cont[8] & !D1L138);


--A1L419 is Select~2530
A1L419 = A1L587 & (A1L411 # A1L410 & y_walker[8]) # !A1L587 & A1L410 & y_walker[8];


--A1L420 is Select~2531
A1L420 = y_rand[28] & y_walker[8] # !y_rand[28] & (A1L585 & A1L304);


--A1L421 is Select~2532
A1L421 = A1L419 # state.update_walker & A1L420 & !A1L630;


--D1L143 is VGA_Controller:u1|oCoord_Y[9]~97
D1L143 = D1_V_Cont[9] $ D1L141;


--x_rand[30] is x_rand[30]
x_rand[30] = DFFEAS(A1L748, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L305 is LessThan~536
A1L305 = x_walker[1] & x_walker[2] & x_walker[3] & x_walker[4];


--A1L306 is LessThan~537
A1L306 = x_walker[5] & x_walker[8];


--A1L307 is LessThan~538
A1L307 = x_walker[8] & (x_walker[6] # x_walker[7]);


--A1L626 is always0~3
A1L626 = x_rand[30] & !A1L307 & (!A1L306 # !A1L305);


--A1L422 is Select~2533
A1L422 = state.update_walker & !A1L626;


--A1L308 is LessThan~539
A1L308 = x_walker[2] # x_walker[3] # x_walker[0] & x_walker[1];


--A1L309 is LessThan~540
A1L309 = x_walker[4] # x_walker[5] # x_walker[6] # x_walker[7];


--A1L627 is always0~4
A1L627 = !x_rand[30] & (x_walker[8] # A1L308 # A1L309);


--A1L423 is Select~2534
A1L423 = A1L422 & (A1L627 & A1L589 # !A1L627 & (x_walker[0]));


--A1L424 is Select~2535
A1L424 = x_walker[0] & !state.update_walker & !state.new_walker;


--A1L425 is Select~2536
A1L425 = state.update_walker & A1L626;


--A1L426 is Select~2537
A1L426 = A1L423 # A1L424 # A1L591 & A1L425;


--D1L92 is VGA_Controller:u1|oCoord_X[1]~173
D1L92 = D1L89 & D1_H_Cont[1] # !D1L89 & (D1_oCoord_X[1]);


--A1L790 is x_walker~1658
A1L790 = A1L627 & (A1L593 & !A1L625) # !A1L627 & x_walker[1];


--A1L427 is Select~2538
A1L427 = state.update_walker # state.new_walker # x_walker[1];


--A1L791 is x_walker~1659
A1L791 = A1L800 # A1L790 & A1L427 & !A1L626;


--D1L94 is VGA_Controller:u1|oCoord_X[2]~174
D1L94 = D1_H_Cont[2] $ VCC;

--D1L95 is VGA_Controller:u1|oCoord_X[2]~175
D1L95 = CARRY(D1_H_Cont[2]);


--A1L792 is x_walker~1660
A1L792 = A1L626 & A1L599 # !A1L626 & (A1L597);


--A1L310 is LessThan~541
A1L310 = A1L307 # x_walker[5] & x_walker[8] & A1L305;


--A1L788 is x_walker[8]~1661
A1L788 = A1L694 & x_rand[30] & A1L310 # !A1L866;


--A1L311 is LessThan~542
A1L311 = x_walker[8] # A1L308 # A1L309;


--A1L789 is x_walker[8]~1662
A1L789 = !A1L788 & (x_rand[30] # A1L311 # !A1L694);


--D1L97 is VGA_Controller:u1|oCoord_X[3]~176
D1L97 = D1_H_Cont[3] & D1L95 & VCC # !D1_H_Cont[3] & !D1L95;

--D1L98 is VGA_Controller:u1|oCoord_X[3]~177
D1L98 = CARRY(!D1_H_Cont[3] & !D1L95);


--A1L793 is x_walker~1663
A1L793 = !state.new_walker & (A1L626 & A1L603 # !A1L626 & (A1L601));


--A1L794 is x_walker~1664
A1L794 = A1L793 # state.new_walker & x_rand[30];


--D1L100 is VGA_Controller:u1|oCoord_X[4]~178
D1L100 = D1_H_Cont[4] & (D1L98 $ GND) # !D1_H_Cont[4] & !D1L98 & VCC;

--D1L101 is VGA_Controller:u1|oCoord_X[4]~179
D1L101 = CARRY(D1_H_Cont[4] & !D1L98);


--A1L795 is x_walker~1665
A1L795 = !state.new_walker & (A1L626 & A1L607 # !A1L626 & (A1L605));


--A1L796 is x_walker~1666
A1L796 = A1L795 # state.new_walker & x_rand[30];


--D1L103 is VGA_Controller:u1|oCoord_X[5]~180
D1L103 = D1_H_Cont[5] & D1L101 & VCC # !D1_H_Cont[5] & !D1L101;

--D1L104 is VGA_Controller:u1|oCoord_X[5]~181
D1L104 = CARRY(!D1_H_Cont[5] & !D1L101);


--A1L797 is x_walker~1667
A1L797 = A1L626 & A1L611 # !A1L626 & (A1L609);


--D1L106 is VGA_Controller:u1|oCoord_X[6]~182
D1L106 = D1_H_Cont[6] & (GND # !D1L104) # !D1_H_Cont[6] & (D1L104 $ GND);

--D1L107 is VGA_Controller:u1|oCoord_X[6]~183
D1L107 = CARRY(D1_H_Cont[6] # !D1L104);


--A1L428 is Select~2539
A1L428 = A1L410 & (x_walker[6] # A1L615 & A1L425) # !A1L410 & A1L615 & A1L425;


--A1L429 is Select~2540
A1L429 = x_rand[30] & x_walker[6] # !x_rand[30] & (A1L613 & A1L311);


--D1L109 is VGA_Controller:u1|oCoord_X[7]~184
D1L109 = D1_H_Cont[7] & !D1L107 # !D1_H_Cont[7] & (D1L107 # GND);

--D1L110 is VGA_Controller:u1|oCoord_X[7]~185
D1L110 = CARRY(!D1L107 # !D1_H_Cont[7]);


--A1L430 is Select~2541
A1L430 = A1L410 & (x_walker[7] # A1L619 & A1L425) # !A1L410 & A1L619 & A1L425;


--A1L431 is Select~2542
A1L431 = x_rand[30] & x_walker[7] # !x_rand[30] & (A1L617 & A1L311);


--D1L112 is VGA_Controller:u1|oCoord_X[8]~186
D1L112 = D1_H_Cont[8] & (GND # !D1L110) # !D1_H_Cont[8] & (D1L110 $ GND);

--D1L113 is VGA_Controller:u1|oCoord_X[8]~187
D1L113 = CARRY(D1_H_Cont[8] # !D1L110);


--A1L798 is x_walker~1668
A1L798 = A1L626 & A1L623 # !A1L626 & (A1L621);


--D1L115 is VGA_Controller:u1|oCoord_X[9]~188
D1L115 = D1_H_Cont[9] $ !D1L113;


--A1L697 is state~1456
A1L697 = KEY[0] & (state.init # !A1L625);


--C1_Cont[0] is Reset_Delay:r0|Cont[0]
C1_Cont[0] = DFFEAS(C1L3, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[1] is Reset_Delay:r0|Cont[1]
C1_Cont[1] = DFFEAS(C1L6, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--A1L668 is rtl~194
A1L668 = C1_Cont[0] & C1_Cont[1];


--C1_Cont[2] is Reset_Delay:r0|Cont[2]
C1_Cont[2] = DFFEAS(C1L9, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[3] is Reset_Delay:r0|Cont[3]
C1_Cont[3] = DFFEAS(C1L12, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[4] is Reset_Delay:r0|Cont[4]
C1_Cont[4] = DFFEAS(C1L15, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[5] is Reset_Delay:r0|Cont[5]
C1_Cont[5] = DFFEAS(C1L18, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[6] is Reset_Delay:r0|Cont[6]
C1_Cont[6] = DFFEAS(C1L21, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[7] is Reset_Delay:r0|Cont[7]
C1_Cont[7] = DFFEAS(C1L24, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--A1L669 is rtl~195
A1L669 = C1_Cont[4] & C1_Cont[5] & C1_Cont[6] & C1_Cont[7];


--A1L670 is rtl~196
A1L670 = A1L668 & C1_Cont[2] & C1_Cont[3] & A1L669;


--C1_Cont[8] is Reset_Delay:r0|Cont[8]
C1_Cont[8] = DFFEAS(C1L27, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[9] is Reset_Delay:r0|Cont[9]
C1_Cont[9] = DFFEAS(C1L30, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[10] is Reset_Delay:r0|Cont[10]
C1_Cont[10] = DFFEAS(C1L33, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[11] is Reset_Delay:r0|Cont[11]
C1_Cont[11] = DFFEAS(C1L36, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--A1L671 is rtl~197
A1L671 = C1_Cont[8] & C1_Cont[9] & C1_Cont[10] & C1_Cont[11];


--C1_Cont[12] is Reset_Delay:r0|Cont[12]
C1_Cont[12] = DFFEAS(C1L39, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[13] is Reset_Delay:r0|Cont[13]
C1_Cont[13] = DFFEAS(C1L42, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[14] is Reset_Delay:r0|Cont[14]
C1_Cont[14] = DFFEAS(C1L45, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[15] is Reset_Delay:r0|Cont[15]
C1_Cont[15] = DFFEAS(C1L48, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--A1L672 is rtl~198
A1L672 = C1_Cont[12] & C1_Cont[13] & C1_Cont[14] & C1_Cont[15];


--C1_Cont[16] is Reset_Delay:r0|Cont[16]
C1_Cont[16] = DFFEAS(C1L51, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[17] is Reset_Delay:r0|Cont[17]
C1_Cont[17] = DFFEAS(C1L54, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[18] is Reset_Delay:r0|Cont[18]
C1_Cont[18] = DFFEAS(C1L57, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--C1_Cont[19] is Reset_Delay:r0|Cont[19]
C1_Cont[19] = DFFEAS(C1L60, CLOCK_50,  ,  , A1L661,  ,  ,  ,  );


--A1L673 is rtl~199
A1L673 = C1_Cont[16] & C1_Cont[17] & C1_Cont[18] & C1_Cont[19];


--A1L661 is rtl~1
A1L661 = !A1L673 # !A1L672 # !A1L671 # !A1L670;


--data_reg[15] is data_reg[15]
data_reg[15] = DFFEAS(A1L636, E1__clk0,  ,  ,  ,  ,  , !KEY[0],  );


--y_rand[27] is y_rand[27]
y_rand[27] = DFFEAS(A1L833, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L832 is y_rand~464
A1L832 = y_rand[27] # !KEY[0];


--A1L645 is lock~54
A1L645 = !A1L625 & (state.test1 # lock);


--x_rand[29] is x_rand[29]
x_rand[29] = DFFEAS(A1L749, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L748 is x_rand~535
A1L748 = x_rand[29] # !KEY[0];


--C1L3 is Reset_Delay:r0|Cont[0]~220
C1L3 = C1_Cont[0] $ VCC;

--C1L4 is Reset_Delay:r0|Cont[0]~221
C1L4 = CARRY(C1_Cont[0]);


--C1L6 is Reset_Delay:r0|Cont[1]~222
C1L6 = C1_Cont[1] & !C1L4 # !C1_Cont[1] & (C1L4 # GND);

--C1L7 is Reset_Delay:r0|Cont[1]~223
C1L7 = CARRY(!C1L4 # !C1_Cont[1]);


--C1L9 is Reset_Delay:r0|Cont[2]~224
C1L9 = C1_Cont[2] & (C1L7 $ GND) # !C1_Cont[2] & !C1L7 & VCC;

--C1L10 is Reset_Delay:r0|Cont[2]~225
C1L10 = CARRY(C1_Cont[2] & !C1L7);


--C1L12 is Reset_Delay:r0|Cont[3]~226
C1L12 = C1_Cont[3] & !C1L10 # !C1_Cont[3] & (C1L10 # GND);

--C1L13 is Reset_Delay:r0|Cont[3]~227
C1L13 = CARRY(!C1L10 # !C1_Cont[3]);


--C1L15 is Reset_Delay:r0|Cont[4]~228
C1L15 = C1_Cont[4] & (C1L13 $ GND) # !C1_Cont[4] & !C1L13 & VCC;

--C1L16 is Reset_Delay:r0|Cont[4]~229
C1L16 = CARRY(C1_Cont[4] & !C1L13);


--C1L18 is Reset_Delay:r0|Cont[5]~230
C1L18 = C1_Cont[5] & !C1L16 # !C1_Cont[5] & (C1L16 # GND);

--C1L19 is Reset_Delay:r0|Cont[5]~231
C1L19 = CARRY(!C1L16 # !C1_Cont[5]);


--C1L21 is Reset_Delay:r0|Cont[6]~232
C1L21 = C1_Cont[6] & (C1L19 $ GND) # !C1_Cont[6] & !C1L19 & VCC;

--C1L22 is Reset_Delay:r0|Cont[6]~233
C1L22 = CARRY(C1_Cont[6] & !C1L19);


--C1L24 is Reset_Delay:r0|Cont[7]~234
C1L24 = C1_Cont[7] & !C1L22 # !C1_Cont[7] & (C1L22 # GND);

--C1L25 is Reset_Delay:r0|Cont[7]~235
C1L25 = CARRY(!C1L22 # !C1_Cont[7]);


--C1L27 is Reset_Delay:r0|Cont[8]~236
C1L27 = C1_Cont[8] & (C1L25 $ GND) # !C1_Cont[8] & !C1L25 & VCC;

--C1L28 is Reset_Delay:r0|Cont[8]~237
C1L28 = CARRY(C1_Cont[8] & !C1L25);


--C1L30 is Reset_Delay:r0|Cont[9]~238
C1L30 = C1_Cont[9] & !C1L28 # !C1_Cont[9] & (C1L28 # GND);

--C1L31 is Reset_Delay:r0|Cont[9]~239
C1L31 = CARRY(!C1L28 # !C1_Cont[9]);


--C1L33 is Reset_Delay:r0|Cont[10]~240
C1L33 = C1_Cont[10] & (C1L31 $ GND) # !C1_Cont[10] & !C1L31 & VCC;

--C1L34 is Reset_Delay:r0|Cont[10]~241
C1L34 = CARRY(C1_Cont[10] & !C1L31);


--C1L36 is Reset_Delay:r0|Cont[11]~242
C1L36 = C1_Cont[11] & !C1L34 # !C1_Cont[11] & (C1L34 # GND);

--C1L37 is Reset_Delay:r0|Cont[11]~243
C1L37 = CARRY(!C1L34 # !C1_Cont[11]);


--C1L39 is Reset_Delay:r0|Cont[12]~244
C1L39 = C1_Cont[12] & (C1L37 $ GND) # !C1_Cont[12] & !C1L37 & VCC;

--C1L40 is Reset_Delay:r0|Cont[12]~245
C1L40 = CARRY(C1_Cont[12] & !C1L37);


--C1L42 is Reset_Delay:r0|Cont[13]~246
C1L42 = C1_Cont[13] & !C1L40 # !C1_Cont[13] & (C1L40 # GND);

--C1L43 is Reset_Delay:r0|Cont[13]~247
C1L43 = CARRY(!C1L40 # !C1_Cont[13]);


--C1L45 is Reset_Delay:r0|Cont[14]~248
C1L45 = C1_Cont[14] & (C1L43 $ GND) # !C1_Cont[14] & !C1L43 & VCC;

--C1L46 is Reset_Delay:r0|Cont[14]~249
C1L46 = CARRY(C1_Cont[14] & !C1L43);


--C1L48 is Reset_Delay:r0|Cont[15]~250
C1L48 = C1_Cont[15] & !C1L46 # !C1_Cont[15] & (C1L46 # GND);

--C1L49 is Reset_Delay:r0|Cont[15]~251
C1L49 = CARRY(!C1L46 # !C1_Cont[15]);


--C1L51 is Reset_Delay:r0|Cont[16]~252
C1L51 = C1_Cont[16] & (C1L49 $ GND) # !C1_Cont[16] & !C1L49 & VCC;

--C1L52 is Reset_Delay:r0|Cont[16]~253
C1L52 = CARRY(C1_Cont[16] & !C1L49);


--C1L54 is Reset_Delay:r0|Cont[17]~254
C1L54 = C1_Cont[17] & !C1L52 # !C1_Cont[17] & (C1L52 # GND);

--C1L55 is Reset_Delay:r0|Cont[17]~255
C1L55 = CARRY(!C1L52 # !C1_Cont[17]);


--C1L57 is Reset_Delay:r0|Cont[18]~256
C1L57 = C1_Cont[18] & (C1L55 $ GND) # !C1_Cont[18] & !C1L55 & VCC;

--C1L58 is Reset_Delay:r0|Cont[18]~257
C1L58 = CARRY(C1_Cont[18] & !C1L55);


--C1L60 is Reset_Delay:r0|Cont[19]~258
C1L60 = C1_Cont[19] $ C1L58;


--y_rand[26] is y_rand[26]
y_rand[26] = DFFEAS(A1L834, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L833 is y_rand~465
A1L833 = KEY[0] & y_rand[26];


--x_rand[28] is x_rand[28]
x_rand[28] = DFFEAS(A1L750, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L749 is x_rand~536
A1L749 = KEY[0] & x_rand[28];


--y_rand[25] is y_rand[25]
y_rand[25] = DFFEAS(A1L835, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L834 is y_rand~466
A1L834 = y_rand[25] # !KEY[0];


--x_rand[27] is x_rand[27]
x_rand[27] = DFFEAS(A1L751, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L750 is x_rand~537
A1L750 = x_rand[27] # !KEY[0];


--y_rand[24] is y_rand[24]
y_rand[24] = DFFEAS(A1L836, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L835 is y_rand~467
A1L835 = KEY[0] & y_rand[24];


--x_rand[26] is x_rand[26]
x_rand[26] = DFFEAS(A1L752, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L751 is x_rand~538
A1L751 = KEY[0] & x_rand[26];


--y_rand[23] is y_rand[23]
y_rand[23] = DFFEAS(A1L837, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L836 is y_rand~468
A1L836 = y_rand[23] # !KEY[0];


--x_rand[25] is x_rand[25]
x_rand[25] = DFFEAS(A1L753, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L752 is x_rand~539
A1L752 = x_rand[25] # !KEY[0];


--y_rand[22] is y_rand[22]
y_rand[22] = DFFEAS(A1L838, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L837 is y_rand~469
A1L837 = KEY[0] & y_rand[22];


--x_rand[24] is x_rand[24]
x_rand[24] = DFFEAS(A1L754, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L753 is x_rand~540
A1L753 = KEY[0] & x_rand[24];


--y_rand[21] is y_rand[21]
y_rand[21] = DFFEAS(A1L839, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L838 is y_rand~470
A1L838 = y_rand[21] # !KEY[0];


--x_rand[23] is x_rand[23]
x_rand[23] = DFFEAS(A1L755, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L754 is x_rand~541
A1L754 = x_rand[23] # !KEY[0];


--y_rand[20] is y_rand[20]
y_rand[20] = DFFEAS(A1L840, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L839 is y_rand~471
A1L839 = KEY[0] & y_rand[20];


--x_rand[22] is x_rand[22]
x_rand[22] = DFFEAS(A1L756, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L755 is x_rand~542
A1L755 = KEY[0] & x_rand[22];


--y_rand[19] is y_rand[19]
y_rand[19] = DFFEAS(A1L841, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L840 is y_rand~472
A1L840 = y_rand[19] # !KEY[0];


--x_rand[21] is x_rand[21]
x_rand[21] = DFFEAS(A1L757, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L756 is x_rand~543
A1L756 = x_rand[21] # !KEY[0];


--y_rand[18] is y_rand[18]
y_rand[18] = DFFEAS(A1L842, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L841 is y_rand~473
A1L841 = KEY[0] & y_rand[18];


--x_rand[20] is x_rand[20]
x_rand[20] = DFFEAS(A1L758, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L757 is x_rand~544
A1L757 = KEY[0] & x_rand[20];


--y_rand[17] is y_rand[17]
y_rand[17] = DFFEAS(A1L843, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L842 is y_rand~474
A1L842 = y_rand[17] # !KEY[0];


--x_rand[19] is x_rand[19]
x_rand[19] = DFFEAS(A1L759, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L758 is x_rand~545
A1L758 = x_rand[19] # !KEY[0];


--y_rand[16] is y_rand[16]
y_rand[16] = DFFEAS(A1L844, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L843 is y_rand~475
A1L843 = KEY[0] & y_rand[16];


--x_rand[18] is x_rand[18]
x_rand[18] = DFFEAS(A1L760, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L759 is x_rand~546
A1L759 = KEY[0] & x_rand[18];


--y_rand[15] is y_rand[15]
y_rand[15] = DFFEAS(A1L845, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L844 is y_rand~476
A1L844 = y_rand[15] # !KEY[0];


--x_rand[17] is x_rand[17]
x_rand[17] = DFFEAS(A1L761, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L760 is x_rand~547
A1L760 = x_rand[17] # !KEY[0];


--y_rand[14] is y_rand[14]
y_rand[14] = DFFEAS(A1L846, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L845 is y_rand~477
A1L845 = KEY[0] & y_rand[14];


--x_rand[16] is x_rand[16]
x_rand[16] = DFFEAS(A1L762, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L761 is x_rand~548
A1L761 = KEY[0] & x_rand[16];


--y_rand[13] is y_rand[13]
y_rand[13] = DFFEAS(A1L847, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L846 is y_rand~478
A1L846 = y_rand[13] # !KEY[0];


--x_rand[15] is x_rand[15]
x_rand[15] = DFFEAS(A1L763, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L762 is x_rand~549
A1L762 = x_rand[15] # !KEY[0];


--y_rand[12] is y_rand[12]
y_rand[12] = DFFEAS(A1L848, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L847 is y_rand~479
A1L847 = KEY[0] & y_rand[12];


--x_rand[14] is x_rand[14]
x_rand[14] = DFFEAS(A1L764, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L763 is x_rand~550
A1L763 = KEY[0] & x_rand[14];


--y_rand[11] is y_rand[11]
y_rand[11] = DFFEAS(A1L849, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L848 is y_rand~480
A1L848 = y_rand[11] # !KEY[0];


--x_rand[13] is x_rand[13]
x_rand[13] = DFFEAS(A1L765, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L764 is x_rand~551
A1L764 = x_rand[13] # !KEY[0];


--y_rand[10] is y_rand[10]
y_rand[10] = DFFEAS(A1L850, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L849 is y_rand~481
A1L849 = KEY[0] & y_rand[10];


--x_rand[12] is x_rand[12]
x_rand[12] = DFFEAS(A1L766, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L765 is x_rand~552
A1L765 = KEY[0] & x_rand[12];


--y_rand[9] is y_rand[9]
y_rand[9] = DFFEAS(A1L851, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L850 is y_rand~482
A1L850 = y_rand[9] # !KEY[0];


--x_rand[11] is x_rand[11]
x_rand[11] = DFFEAS(A1L767, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L766 is x_rand~553
A1L766 = x_rand[11] # !KEY[0];


--y_rand[8] is y_rand[8]
y_rand[8] = DFFEAS(A1L852, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L851 is y_rand~483
A1L851 = KEY[0] & y_rand[8];


--x_rand[10] is x_rand[10]
x_rand[10] = DFFEAS(A1L768, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L767 is x_rand~554
A1L767 = KEY[0] & x_rand[10];


--y_rand[7] is y_rand[7]
y_rand[7] = DFFEAS(A1L853, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L852 is y_rand~484
A1L852 = y_rand[7] # !KEY[0];


--x_rand[9] is x_rand[9]
x_rand[9] = DFFEAS(A1L769, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L768 is x_rand~555
A1L768 = x_rand[9] # !KEY[0];


--y_rand[6] is y_rand[6]
y_rand[6] = DFFEAS(A1L854, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L853 is y_rand~485
A1L853 = KEY[0] & y_rand[6];


--x_rand[8] is x_rand[8]
x_rand[8] = DFFEAS(A1L770, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L769 is x_rand~556
A1L769 = KEY[0] & x_rand[8];


--y_rand[5] is y_rand[5]
y_rand[5] = DFFEAS(A1L855, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L854 is y_rand~486
A1L854 = y_rand[5] # !KEY[0];


--x_rand[7] is x_rand[7]
x_rand[7] = DFFEAS(A1L771, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L770 is x_rand~557
A1L770 = x_rand[7] # !KEY[0];


--y_rand[4] is y_rand[4]
y_rand[4] = DFFEAS(A1L856, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L855 is y_rand~487
A1L855 = KEY[0] & y_rand[4];


--x_rand[6] is x_rand[6]
x_rand[6] = DFFEAS(A1L772, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L771 is x_rand~558
A1L771 = KEY[0] & x_rand[6];


--y_rand[3] is y_rand[3]
y_rand[3] = DFFEAS(A1L857, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L856 is y_rand~488
A1L856 = y_rand[3] # !KEY[0];


--x_rand[5] is x_rand[5]
x_rand[5] = DFFEAS(A1L773, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L772 is x_rand~559
A1L772 = x_rand[5] # !KEY[0];


--y_rand[2] is y_rand[2]
y_rand[2] = DFFEAS(A1L858, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L857 is y_rand~489
A1L857 = KEY[0] & y_rand[2];


--x_rand[4] is x_rand[4]
x_rand[4] = DFFEAS(A1L774, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L773 is x_rand~560
A1L773 = KEY[0] & x_rand[4];


--y_rand[1] is y_rand[1]
y_rand[1] = DFFEAS(A1L859, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L858 is y_rand~490
A1L858 = y_rand[1] # !KEY[0];


--x_rand[3] is x_rand[3]
x_rand[3] = DFFEAS(A1L775, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L774 is x_rand~561
A1L774 = x_rand[3] # !KEY[0];


--y_rand[0] is y_rand[0]
y_rand[0] = DFFEAS(y_low_bit, E1__clk0,  ,  , A1L717, VCC,  ,  , !KEY[0]);


--A1L859 is y_rand~491
A1L859 = KEY[0] & y_rand[0];


--x_rand[2] is x_rand[2]
x_rand[2] = DFFEAS(A1L776, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L775 is x_rand~562
A1L775 = KEY[0] & x_rand[2];


--y_low_bit is y_low_bit
y_low_bit = y_rand[28] $ y_rand[26];


--x_rand[1] is x_rand[1]
x_rand[1] = DFFEAS(A1L777, E1__clk0,  ,  , A1L717,  ,  ,  ,  );


--A1L776 is x_rand~563
A1L776 = x_rand[1] # !KEY[0];


--x_rand[0] is x_rand[0]
x_rand[0] = DFFEAS(x_low_bit, E1__clk0,  ,  , A1L717, VCC,  ,  , !KEY[0]);


--A1L777 is x_rand~564
A1L777 = KEY[0] & x_rand[0];


--x_low_bit is x_low_bit
x_low_bit = x_rand[30] $ x_rand[27];


--A1L866 is y_walker[2]~1947
A1L866 = !A1L625 & (state.update_walker # state.new_walker) # !KEY[0];


--A1L432 is Select~2543
A1L432 = A1L428 # state.update_walker & !A1L626 & A1L429;


--A1L433 is Select~2544
A1L433 = A1L430 # state.update_walker & !A1L626 & A1L431;


--A1L717 is x_rand[0]~565
A1L717 = !A1L625 & (state.update_walker # state.new_walker) # !KEY[0];


--A1L636 is data_reg~144
A1L636 = data_reg[15] # !A1L625 & (state.draw_walker # !state.init);


--A1L799 is x_walker~1669
A1L799 = state.update_walker & (A1L626 & A1L595) # !state.update_walker & state.new_walker;


--A1L800 is x_walker~1670
A1L800 = A1L625 & (x_walker[1]) # !A1L625 & (A1L799 # !state.update_walker & x_walker[1]);


--EXT_CLOCK is EXT_CLOCK
--operation mode is input

EXT_CLOCK = INPUT();


--KEY[1] is KEY[1]
--operation mode is input

KEY[1] = INPUT();


--KEY[2] is KEY[2]
--operation mode is input

KEY[2] = INPUT();


--SW[0] is SW[0]
--operation mode is input

SW[0] = INPUT();


--SW[1] is SW[1]
--operation mode is input

SW[1] = INPUT();


--SW[2] is SW[2]
--operation mode is input

SW[2] = INPUT();


--SW[3] is SW[3]
--operation mode is input

SW[3] = INPUT();


--SW[4] is SW[4]
--operation mode is input

SW[4] = INPUT();


--SW[5] is SW[5]
--operation mode is input

SW[5] = INPUT();


--SW[6] is SW[6]
--operation mode is input

SW[6] = INPUT();


--SW[7] is SW[7]
--operation mode is input

SW[7] = INPUT();


--SW[8] is SW[8]
--operation mode is input

SW[8] = INPUT();


--SW[9] is SW[9]
--operation mode is input

SW[9] = INPUT();


--SW[10] is SW[10]
--operation mode is input

SW[10] = INPUT();


--SW[11] is SW[11]
--operation mode is input

SW[11] = INPUT();


--SW[12] is SW[12]
--operation mode is input

SW[12] = INPUT();


--SW[13] is SW[13]
--operation mode is input

SW[13] = INPUT();


--SW[14] is SW[14]
--operation mode is input

SW[14] = INPUT();


--SW[15] is SW[15]
--operation mode is input

SW[15] = INPUT();


--SW[16] is SW[16]
--operation mode is input

SW[16] = INPUT();


--SW[17] is SW[17]
--operation mode is input

SW[17] = INPUT();


--UART_RXD is UART_RXD
--operation mode is input

UART_RXD = INPUT();


--IRDA_RXD is IRDA_RXD
--operation mode is input

IRDA_RXD = INPUT();


--OTG_INT0 is OTG_INT0
--operation mode is input

OTG_INT0 = INPUT();


--OTG_INT1 is OTG_INT1
--operation mode is input

OTG_INT1 = INPUT();


--OTG_DREQ0 is OTG_DREQ0
--operation mode is input

OTG_DREQ0 = INPUT();


--OTG_DREQ1 is OTG_DREQ1
--operation mode is input

OTG_DREQ1 = INPUT();


--TDI is TDI
--operation mode is input

TDI = INPUT();


--TCK is TCK
--operation mode is input

TCK = INPUT();


--TCS is TCS
--operation mode is input

TCS = INPUT();


--PS2_DAT is PS2_DAT
--operation mode is input

PS2_DAT = INPUT();


--PS2_CLK is PS2_CLK
--operation mode is input

PS2_CLK = INPUT();


--ENET_INT is ENET_INT
--operation mode is input

ENET_INT = INPUT();


--AUD_ADCDAT is AUD_ADCDAT
--operation mode is input

AUD_ADCDAT = INPUT();


--TD_DATA[0] is TD_DATA[0]
--operation mode is input

TD_DATA[0] = INPUT();


--TD_DATA[1] is TD_DATA[1]
--operation mode is input

TD_DATA[1] = INPUT();


--TD_DATA[2] is TD_DATA[2]
--operation mode is input

TD_DATA[2] = INPUT();


--TD_DATA[3] is TD_DATA[3]
--operation mode is input

TD_DATA[3] = INPUT();


--TD_DATA[4] is TD_DATA[4]
--operation mode is input

TD_DATA[4] = INPUT();


--TD_DATA[5] is TD_DATA[5]
--operation mode is input

TD_DATA[5] = INPUT();


--TD_DATA[6] is TD_DATA[6]
--operation mode is input

TD_DATA[6] = INPUT();


--TD_DATA[7] is TD_DATA[7]
--operation mode is input

TD_DATA[7] = INPUT();


--TD_HS is TD_HS
--operation mode is input

TD_HS = INPUT();


--TD_VS is TD_VS
--operation mode is input

TD_VS = INPUT();


--KEY[3] is KEY[3]
--operation mode is input

KEY[3] = INPUT();


--KEY[0] is KEY[0]
--operation mode is input

KEY[0] = INPUT();


--CLOCK_27 is CLOCK_27
--operation mode is input

CLOCK_27 = INPUT();


--CLOCK_50 is CLOCK_50
--operation mode is input

CLOCK_50 = INPUT();


--HEX0[0] is HEX0[0]
--operation mode is output

HEX0[0] = OUTPUT(GND);


--HEX0[1] is HEX0[1]
--operation mode is output

HEX0[1] = OUTPUT(GND);


--HEX0[2] is HEX0[2]
--operation mode is output

HEX0[2] = OUTPUT(GND);


--HEX0[3] is HEX0[3]
--operation mode is output

HEX0[3] = OUTPUT(GND);


--HEX0[4] is HEX0[4]
--operation mode is output

HEX0[4] = OUTPUT(GND);


--HEX0[5] is HEX0[5]
--operation mode is output

HEX0[5] = OUTPUT(GND);


--HEX0[6] is HEX0[6]
--operation mode is output

HEX0[6] = OUTPUT(GND);


--HEX1[0] is HEX1[0]
--operation mode is output

HEX1[0] = OUTPUT(GND);


--HEX1[1] is HEX1[1]
--operation mode is output

HEX1[1] = OUTPUT(GND);


--HEX1[2] is HEX1[2]
--operation mode is output

HEX1[2] = OUTPUT(GND);


--HEX1[3] is HEX1[3]
--operation mode is output

HEX1[3] = OUTPUT(GND);


--HEX1[4] is HEX1[4]
--operation mode is output

HEX1[4] = OUTPUT(GND);


--HEX1[5] is HEX1[5]
--operation mode is output

HEX1[5] = OUTPUT(GND);


--HEX1[6] is HEX1[6]
--operation mode is output

HEX1[6] = OUTPUT(GND);


--HEX2[0] is HEX2[0]
--operation mode is output

HEX2[0] = OUTPUT(GND);


--HEX2[1] is HEX2[1]
--operation mode is output

HEX2[1] = OUTPUT(GND);


--HEX2[2] is HEX2[2]
--operation mode is output

HEX2[2] = OUTPUT(GND);


--HEX2[3] is HEX2[3]
--operation mode is output

HEX2[3] = OUTPUT(GND);


--HEX2[4] is HEX2[4]
--operation mode is output

HEX2[4] = OUTPUT(GND);


--HEX2[5] is HEX2[5]
--operation mode is output

HEX2[5] = OUTPUT(GND);


--HEX2[6] is HEX2[6]
--operation mode is output

HEX2[6] = OUTPUT(GND);


--HEX3[0] is HEX3[0]
--operation mode is output

HEX3[0] = OUTPUT(GND);


--HEX3[1] is HEX3[1]
--operation mode is output

HEX3[1] = OUTPUT(GND);


--HEX3[2] is HEX3[2]
--operation mode is output

HEX3[2] = OUTPUT(GND);


--HEX3[3] is HEX3[3]
--operation mode is output

HEX3[3] = OUTPUT(GND);


--HEX3[4] is HEX3[4]
--operation mode is output

HEX3[4] = OUTPUT(GND);


--HEX3[5] is HEX3[5]
--operation mode is output

HEX3[5] = OUTPUT(GND);


--HEX3[6] is HEX3[6]
--operation mode is output

HEX3[6] = OUTPUT(GND);


--HEX4[0] is HEX4[0]
--operation mode is output

HEX4[0] = OUTPUT(GND);


--HEX4[1] is HEX4[1]
--operation mode is output

HEX4[1] = OUTPUT(GND);


--HEX4[2] is HEX4[2]
--operation mode is output

HEX4[2] = OUTPUT(GND);


--HEX4[3] is HEX4[3]
--operation mode is output

HEX4[3] = OUTPUT(GND);


--HEX4[4] is HEX4[4]
--operation mode is output

HEX4[4] = OUTPUT(GND);


--HEX4[5] is HEX4[5]
--operation mode is output

HEX4[5] = OUTPUT(GND);


--HEX4[6] is HEX4[6]
--operation mode is output

HEX4[6] = OUTPUT(GND);


--HEX5[0] is HEX5[0]
--operation mode is output

HEX5[0] = OUTPUT(GND);


--HEX5[1] is HEX5[1]
--operation mode is output

HEX5[1] = OUTPUT(GND);


--HEX5[2] is HEX5[2]
--operation mode is output

HEX5[2] = OUTPUT(GND);


--HEX5[3] is HEX5[3]
--operation mode is output

HEX5[3] = OUTPUT(GND);


--HEX5[4] is HEX5[4]
--operation mode is output

HEX5[4] = OUTPUT(GND);


--HEX5[5] is HEX5[5]
--operation mode is output

HEX5[5] = OUTPUT(GND);


--HEX5[6] is HEX5[6]
--operation mode is output

HEX5[6] = OUTPUT(GND);


--HEX6[0] is HEX6[0]
--operation mode is output

HEX6[0] = OUTPUT(GND);


--HEX6[1] is HEX6[1]
--operation mode is output

HEX6[1] = OUTPUT(GND);


--HEX6[2] is HEX6[2]
--operation mode is output

HEX6[2] = OUTPUT(GND);


--HEX6[3] is HEX6[3]
--operation mode is output

HEX6[3] = OUTPUT(GND);


--HEX6[4] is HEX6[4]
--operation mode is output

HEX6[4] = OUTPUT(GND);


--HEX6[5] is HEX6[5]
--operation mode is output

HEX6[5] = OUTPUT(GND);


--HEX6[6] is HEX6[6]
--operation mode is output

HEX6[6] = OUTPUT(GND);


--HEX7[0] is HEX7[0]
--operation mode is output

HEX7[0] = OUTPUT(GND);


--HEX7[1] is HEX7[1]
--operation mode is output

HEX7[1] = OUTPUT(GND);


--HEX7[2] is HEX7[2]
--operation mode is output

HEX7[2] = OUTPUT(GND);


--HEX7[3] is HEX7[3]
--operation mode is output

HEX7[3] = OUTPUT(GND);


--HEX7[4] is HEX7[4]
--operation mode is output

HEX7[4] = OUTPUT(GND);


--HEX7[5] is HEX7[5]
--operation mode is output

HEX7[5] = OUTPUT(GND);


--HEX7[6] is HEX7[6]
--operation mode is output

HEX7[6] = OUTPUT(GND);


--LEDG[0] is LEDG[0]
--operation mode is output

LEDG[0] = OUTPUT(led[0]);


--LEDG[1] is LEDG[1]
--operation mode is output

LEDG[1] = OUTPUT(led[1]);


--LEDG[2] is LEDG[2]
--operation mode is output

LEDG[2] = OUTPUT(led[2]);


--LEDG[3] is LEDG[3]
--operation mode is output

LEDG[3] = OUTPUT(led[3]);


--LEDG[4] is LEDG[4]
--operation mode is output

LEDG[4] = OUTPUT(GND);


--LEDG[5] is LEDG[5]
--operation mode is output

LEDG[5] = OUTPUT(GND);


--LEDG[6] is LEDG[6]
--operation mode is output

LEDG[6] = OUTPUT(GND);


--LEDG[7] is LEDG[7]
--operation mode is output

LEDG[7] = OUTPUT(GND);


--LEDG[8] is LEDG[8]
--operation mode is output

LEDG[8] = OUTPUT(GND);


--LEDR[0] is LEDR[0]
--operation mode is output

LEDR[0] = OUTPUT(GND);


--LEDR[1] is LEDR[1]
--operation mode is output

LEDR[1] = OUTPUT(GND);


--LEDR[2] is LEDR[2]
--operation mode is output

LEDR[2] = OUTPUT(GND);


--LEDR[3] is LEDR[3]
--operation mode is output

LEDR[3] = OUTPUT(GND);


--LEDR[4] is LEDR[4]
--operation mode is output

LEDR[4] = OUTPUT(GND);


--LEDR[5] is LEDR[5]
--operation mode is output

LEDR[5] = OUTPUT(GND);


--LEDR[6] is LEDR[6]
--operation mode is output

LEDR[6] = OUTPUT(GND);


--LEDR[7] is LEDR[7]
--operation mode is output

LEDR[7] = OUTPUT(GND);


--LEDR[8] is LEDR[8]
--operation mode is output

LEDR[8] = OUTPUT(GND);


--LEDR[9] is LEDR[9]
--operation mode is output

LEDR[9] = OUTPUT(GND);


--LEDR[10] is LEDR[10]
--operation mode is output

LEDR[10] = OUTPUT(GND);


--LEDR[11] is LEDR[11]
--operation mode is output

LEDR[11] = OUTPUT(GND);


--LEDR[12] is LEDR[12]
--operation mode is output

LEDR[12] = OUTPUT(GND);


--LEDR[13] is LEDR[13]
--operation mode is output

LEDR[13] = OUTPUT(GND);


--LEDR[14] is LEDR[14]
--operation mode is output

LEDR[14] = OUTPUT(GND);


--LEDR[15] is LEDR[15]
--operation mode is output

LEDR[15] = OUTPUT(GND);


--LEDR[16] is LEDR[16]
--operation mode is output

LEDR[16] = OUTPUT(GND);


--LEDR[17] is LEDR[17]
--operation mode is output

LEDR[17] = OUTPUT(GND);


--UART_TXD is UART_TXD
--operation mode is output

UART_TXD = OUTPUT(GND);


--IRDA_TXD is IRDA_TXD
--operation mode is output

IRDA_TXD = OUTPUT(GND);


--DRAM_ADDR[0] is DRAM_ADDR[0]
--operation mode is output

DRAM_ADDR[0] = OUTPUT(GND);


--DRAM_ADDR[1] is DRAM_ADDR[1]
--operation mode is output

DRAM_ADDR[1] = OUTPUT(GND);


--DRAM_ADDR[2] is DRAM_ADDR[2]
--operation mode is output

DRAM_ADDR[2] = OUTPUT(GND);


--DRAM_ADDR[3] is DRAM_ADDR[3]
--operation mode is output

DRAM_ADDR[3] = OUTPUT(GND);


--DRAM_ADDR[4] is DRAM_ADDR[4]
--operation mode is output

DRAM_ADDR[4] = OUTPUT(GND);


--DRAM_ADDR[5] is DRAM_ADDR[5]
--operation mode is output

DRAM_ADDR[5] = OUTPUT(GND);


--DRAM_ADDR[6] is DRAM_ADDR[6]
--operation mode is output

DRAM_ADDR[6] = OUTPUT(GND);


--DRAM_ADDR[7] is DRAM_ADDR[7]
--operation mode is output

DRAM_ADDR[7] = OUTPUT(GND);


--DRAM_ADDR[8] is DRAM_ADDR[8]
--operation mode is output

DRAM_ADDR[8] = OUTPUT(GND);


--DRAM_ADDR[9] is DRAM_ADDR[9]
--operation mode is output

DRAM_ADDR[9] = OUTPUT(GND);


--DRAM_ADDR[10] is DRAM_ADDR[10]
--operation mode is output

DRAM_ADDR[10] = OUTPUT(GND);


--DRAM_ADDR[11] is DRAM_ADDR[11]
--operation mode is output

DRAM_ADDR[11] = OUTPUT(GND);


--DRAM_LDQM is DRAM_LDQM
--operation mode is output

DRAM_LDQM = OUTPUT(GND);


--DRAM_UDQM is DRAM_UDQM
--operation mode is output

DRAM_UDQM = OUTPUT(GND);


--DRAM_WE_N is DRAM_WE_N
--operation mode is output

DRAM_WE_N = OUTPUT(GND);


--DRAM_CAS_N is DRAM_CAS_N
--operation mode is output

DRAM_CAS_N = OUTPUT(GND);


--DRAM_RAS_N is DRAM_RAS_N
--operation mode is output

DRAM_RAS_N = OUTPUT(GND);


--DRAM_CS_N is DRAM_CS_N
--operation mode is output

DRAM_CS_N = OUTPUT(GND);


--DRAM_BA_0 is DRAM_BA_0
--operation mode is output

DRAM_BA_0 = OUTPUT(GND);


--DRAM_BA_1 is DRAM_BA_1
--operation mode is output

DRAM_BA_1 = OUTPUT(GND);


--DRAM_CLK is DRAM_CLK
--operation mode is output

DRAM_CLK = OUTPUT(GND);


--DRAM_CKE is DRAM_CKE
--operation mode is output

DRAM_CKE = OUTPUT(GND);


--FL_ADDR[0] is FL_ADDR[0]
--operation mode is output

FL_ADDR[0] = OUTPUT(GND);


--FL_ADDR[1] is FL_ADDR[1]
--operation mode is output

FL_ADDR[1] = OUTPUT(GND);


--FL_ADDR[2] is FL_ADDR[2]
--operation mode is output

FL_ADDR[2] = OUTPUT(GND);


--FL_ADDR[3] is FL_ADDR[3]
--operation mode is output

FL_ADDR[3] = OUTPUT(GND);


--FL_ADDR[4] is FL_ADDR[4]
--operation mode is output

FL_ADDR[4] = OUTPUT(GND);


--FL_ADDR[5] is FL_ADDR[5]
--operation mode is output

FL_ADDR[5] = OUTPUT(GND);


--FL_ADDR[6] is FL_ADDR[6]
--operation mode is output

FL_ADDR[6] = OUTPUT(GND);


--FL_ADDR[7] is FL_ADDR[7]
--operation mode is output

FL_ADDR[7] = OUTPUT(GND);


--FL_ADDR[8] is FL_ADDR[8]
--operation mode is output

FL_ADDR[8] = OUTPUT(GND);


--FL_ADDR[9] is FL_ADDR[9]
--operation mode is output

FL_ADDR[9] = OUTPUT(GND);


--FL_ADDR[10] is FL_ADDR[10]
--operation mode is output

FL_ADDR[10] = OUTPUT(GND);


--FL_ADDR[11] is FL_ADDR[11]
--operation mode is output

FL_ADDR[11] = OUTPUT(GND);


--FL_ADDR[12] is FL_ADDR[12]
--operation mode is output

FL_ADDR[12] = OUTPUT(GND);


--FL_ADDR[13] is FL_ADDR[13]
--operation mode is output

FL_ADDR[13] = OUTPUT(GND);


--FL_ADDR[14] is FL_ADDR[14]
--operation mode is output

FL_ADDR[14] = OUTPUT(GND);


--FL_ADDR[15] is FL_ADDR[15]
--operation mode is output

FL_ADDR[15] = OUTPUT(GND);


--FL_ADDR[16] is FL_ADDR[16]
--operation mode is output

FL_ADDR[16] = OUTPUT(GND);


--FL_ADDR[17] is FL_ADDR[17]
--operation mode is output

FL_ADDR[17] = OUTPUT(GND);


--FL_ADDR[18] is FL_ADDR[18]
--operation mode is output

FL_ADDR[18] = OUTPUT(GND);


--FL_ADDR[19] is FL_ADDR[19]
--operation mode is output

FL_ADDR[19] = OUTPUT(GND);


--FL_ADDR[20] is FL_ADDR[20]
--operation mode is output

FL_ADDR[20] = OUTPUT(GND);


--FL_ADDR[21] is FL_ADDR[21]
--operation mode is output

FL_ADDR[21] = OUTPUT(GND);


--FL_WE_N is FL_WE_N
--operation mode is output

FL_WE_N = OUTPUT(GND);


--FL_RST_N is FL_RST_N
--operation mode is output

FL_RST_N = OUTPUT(GND);


--FL_OE_N is FL_OE_N
--operation mode is output

FL_OE_N = OUTPUT(GND);


--FL_CE_N is FL_CE_N
--operation mode is output

FL_CE_N = OUTPUT(GND);


--SRAM_ADDR[0] is SRAM_ADDR[0]
--operation mode is output

SRAM_ADDR[0] = OUTPUT(addr_reg[0]);


--SRAM_ADDR[1] is SRAM_ADDR[1]
--operation mode is output

SRAM_ADDR[1] = OUTPUT(addr_reg[1]);


--SRAM_ADDR[2] is SRAM_ADDR[2]
--operation mode is output

SRAM_ADDR[2] = OUTPUT(addr_reg[2]);


--SRAM_ADDR[3] is SRAM_ADDR[3]
--operation mode is output

SRAM_ADDR[3] = OUTPUT(addr_reg[3]);


--SRAM_ADDR[4] is SRAM_ADDR[4]
--operation mode is output

SRAM_ADDR[4] = OUTPUT(addr_reg[4]);


--SRAM_ADDR[5] is SRAM_ADDR[5]
--operation mode is output

SRAM_ADDR[5] = OUTPUT(addr_reg[5]);


--SRAM_ADDR[6] is SRAM_ADDR[6]
--operation mode is output

SRAM_ADDR[6] = OUTPUT(addr_reg[6]);


--SRAM_ADDR[7] is SRAM_ADDR[7]
--operation mode is output

SRAM_ADDR[7] = OUTPUT(addr_reg[7]);


--SRAM_ADDR[8] is SRAM_ADDR[8]
--operation mode is output

SRAM_ADDR[8] = OUTPUT(addr_reg[8]);


--SRAM_ADDR[9] is SRAM_ADDR[9]
--operation mode is output

SRAM_ADDR[9] = OUTPUT(addr_reg[9]);


--SRAM_ADDR[10] is SRAM_ADDR[10]
--operation mode is output

SRAM_ADDR[10] = OUTPUT(addr_reg[10]);


--SRAM_ADDR[11] is SRAM_ADDR[11]
--operation mode is output

SRAM_ADDR[11] = OUTPUT(addr_reg[11]);


--SRAM_ADDR[12] is SRAM_ADDR[12]
--operation mode is output

SRAM_ADDR[12] = OUTPUT(addr_reg[12]);


--SRAM_ADDR[13] is SRAM_ADDR[13]
--operation mode is output

SRAM_ADDR[13] = OUTPUT(addr_reg[13]);


--SRAM_ADDR[14] is SRAM_ADDR[14]
--operation mode is output

SRAM_ADDR[14] = OUTPUT(addr_reg[14]);


--SRAM_ADDR[15] is SRAM_ADDR[15]
--operation mode is output

SRAM_ADDR[15] = OUTPUT(addr_reg[15]);


--SRAM_ADDR[16] is SRAM_ADDR[16]
--operation mode is output

SRAM_ADDR[16] = OUTPUT(addr_reg[16]);


--SRAM_ADDR[17] is SRAM_ADDR[17]
--operation mode is output

SRAM_ADDR[17] = OUTPUT(addr_reg[17]);


--SRAM_UB_N is SRAM_UB_N
--operation mode is output

SRAM_UB_N = OUTPUT(GND);


--SRAM_LB_N is SRAM_LB_N
--operation mode is output

SRAM_LB_N = OUTPUT(GND);


--SRAM_WE_N is SRAM_WE_N
--operation mode is output

SRAM_WE_N = OUTPUT(we);


--SRAM_CE_N is SRAM_CE_N
--operation mode is output

SRAM_CE_N = OUTPUT(GND);


--SRAM_OE_N is SRAM_OE_N
--operation mode is output

SRAM_OE_N = OUTPUT(GND);


--OTG_ADDR[0] is OTG_ADDR[0]
--operation mode is output

OTG_ADDR[0] = OUTPUT(GND);


--OTG_ADDR[1] is OTG_ADDR[1]
--operation mode is output

OTG_ADDR[1] = OUTPUT(GND);


--OTG_CS_N is OTG_CS_N
--operation mode is output

OTG_CS_N = OUTPUT(GND);


--OTG_RD_N is OTG_RD_N
--operation mode is output

OTG_RD_N = OUTPUT(GND);


--OTG_WR_N is OTG_WR_N
--operation mode is output

OTG_WR_N = OUTPUT(GND);


--OTG_RST_N is OTG_RST_N
--operation mode is output

OTG_RST_N = OUTPUT(GND);


--OTG_FSPEED is OTG_FSPEED
--operation mode is output

OTG_FSPEED = OUTPUT(GND);


--OTG_LSPEED is OTG_LSPEED
--operation mode is output

OTG_LSPEED = OUTPUT(GND);


--OTG_DACK0_N is OTG_DACK0_N
--operation mode is output

OTG_DACK0_N = OUTPUT(GND);


--OTG_DACK1_N is OTG_DACK1_N
--operation mode is output

OTG_DACK1_N = OUTPUT(GND);


--LCD_ON is LCD_ON
--operation mode is output

LCD_ON = OUTPUT(GND);


--LCD_BLON is LCD_BLON
--operation mode is output

LCD_BLON = OUTPUT(GND);


--LCD_RW is LCD_RW
--operation mode is output

LCD_RW = OUTPUT(GND);


--LCD_EN is LCD_EN
--operation mode is output

LCD_EN = OUTPUT(GND);


--LCD_RS is LCD_RS
--operation mode is output

LCD_RS = OUTPUT(GND);


--SD_CLK is SD_CLK
--operation mode is output

SD_CLK = OUTPUT(GND);


--TDO is TDO
--operation mode is output

TDO = OUTPUT(GND);


--I2C_SCLK is I2C_SCLK
--operation mode is output

I2C_SCLK = OUTPUT(GND);


--VGA_CLK is VGA_CLK
--operation mode is output

VGA_CLK = OUTPUT(E1__clk2);


--VGA_HS is VGA_HS
--operation mode is output

VGA_HS = OUTPUT(D1_oVGA_H_SYNC);


--VGA_VS is VGA_VS
--operation mode is output

VGA_VS = OUTPUT(D1_oVGA_V_SYNC);


--VGA_BLANK is VGA_BLANK
--operation mode is output

VGA_BLANK = OUTPUT(D1_oVGA_BLANK);


--VGA_SYNC is VGA_SYNC
--operation mode is output

VGA_SYNC = OUTPUT(GND);


--VGA_R[0] is VGA_R[0]
--operation mode is output

VGA_R[0] = OUTPUT(GND);


--VGA_R[1] is VGA_R[1]
--operation mode is output

VGA_R[1] = OUTPUT(GND);


--VGA_R[2] is VGA_R[2]
--operation mode is output

VGA_R[2] = OUTPUT(GND);


--VGA_R[3] is VGA_R[3]
--operation mode is output

VGA_R[3] = OUTPUT(GND);


--VGA_R[4] is VGA_R[4]
--operation mode is output

VGA_R[4] = OUTPUT(GND);


--VGA_R[5] is VGA_R[5]
--operation mode is output

VGA_R[5] = OUTPUT(GND);


--VGA_R[6] is VGA_R[6]
--operation mode is output

VGA_R[6] = OUTPUT(D1L155);


--VGA_R[7] is VGA_R[7]
--operation mode is output

VGA_R[7] = OUTPUT(D1L156);


--VGA_R[8] is VGA_R[8]
--operation mode is output

VGA_R[8] = OUTPUT(D1L157);


--VGA_R[9] is VGA_R[9]
--operation mode is output

VGA_R[9] = OUTPUT(D1L158);


--VGA_G[0] is VGA_G[0]
--operation mode is output

VGA_G[0] = OUTPUT(GND);


--VGA_G[1] is VGA_G[1]
--operation mode is output

VGA_G[1] = OUTPUT(GND);


--VGA_G[2] is VGA_G[2]
--operation mode is output

VGA_G[2] = OUTPUT(GND);


--VGA_G[3] is VGA_G[3]
--operation mode is output

VGA_G[3] = OUTPUT(GND);


--VGA_G[4] is VGA_G[4]
--operation mode is output

VGA_G[4] = OUTPUT(GND);


--VGA_G[5] is VGA_G[5]
--operation mode is output

VGA_G[5] = OUTPUT(GND);


--VGA_G[6] is VGA_G[6]
--operation mode is output

VGA_G[6] = OUTPUT(D1L150);


--VGA_G[7] is VGA_G[7]
--operation mode is output

VGA_G[7] = OUTPUT(D1L151);


--VGA_G[8] is VGA_G[8]
--operation mode is output

VGA_G[8] = OUTPUT(D1L152);


--VGA_G[9] is VGA_G[9]
--operation mode is output

VGA_G[9] = OUTPUT(D1L153);


--VGA_B[0] is VGA_B[0]
--operation mode is output

VGA_B[0] = OUTPUT(GND);


--VGA_B[1] is VGA_B[1]
--operation mode is output

VGA_B[1] = OUTPUT(GND);


--VGA_B[2] is VGA_B[2]
--operation mode is output

VGA_B[2] = OUTPUT(GND);


--VGA_B[3] is VGA_B[3]
--operation mode is output

VGA_B[3] = OUTPUT(GND);


--VGA_B[4] is VGA_B[4]
--operation mode is output

VGA_B[4] = OUTPUT(GND);


--VGA_B[5] is VGA_B[5]
--operation mode is output

VGA_B[5] = OUTPUT(GND);


--VGA_B[6] is VGA_B[6]
--operation mode is output

VGA_B[6] = OUTPUT(D1L146);


--VGA_B[7] is VGA_B[7]
--operation mode is output

VGA_B[7] = OUTPUT(D1L147);


--VGA_B[8] is VGA_B[8]
--operation mode is output

VGA_B[8] = OUTPUT(D1L148);


--VGA_B[9] is VGA_B[9]
--operation mode is output

VGA_B[9] = OUTPUT(D1L149);


--ENET_CMD is ENET_CMD
--operation mode is output

ENET_CMD = OUTPUT(GND);


--ENET_CS_N is ENET_CS_N
--operation mode is output

ENET_CS_N = OUTPUT(GND);


--ENET_WR_N is ENET_WR_N
--operation mode is output

ENET_WR_N = OUTPUT(GND);


--ENET_RD_N is ENET_RD_N
--operation mode is output

ENET_RD_N = OUTPUT(GND);


--ENET_RST_N is ENET_RST_N
--operation mode is output

ENET_RST_N = OUTPUT(GND);


--ENET_CLK is ENET_CLK
--operation mode is output

ENET_CLK = OUTPUT(GND);


--AUD_ADCLRCK is AUD_ADCLRCK
--operation mode is output

AUD_ADCLRCK = OUTPUT(GND);


--AUD_DACDAT is AUD_DACDAT
--operation mode is output

AUD_DACDAT = OUTPUT(GND);


--AUD_XCK is AUD_XCK
--operation mode is output

AUD_XCK = OUTPUT(GND);


--TD_RESET is TD_RESET
--operation mode is output

TD_RESET = OUTPUT(VCC);


--LCD_DATA[0] is LCD_DATA[0]
--operation mode is bidir

LCD_DATA[0] = BIDIR(OPNDRN(VCC));


--LCD_DATA[1] is LCD_DATA[1]
--operation mode is bidir

LCD_DATA[1] = BIDIR(OPNDRN(VCC));


--LCD_DATA[2] is LCD_DATA[2]
--operation mode is bidir

LCD_DATA[2] = BIDIR(OPNDRN(VCC));


--LCD_DATA[3] is LCD_DATA[3]
--operation mode is bidir

LCD_DATA[3] = BIDIR(OPNDRN(VCC));


--LCD_DATA[4] is LCD_DATA[4]
--operation mode is bidir

LCD_DATA[4] = BIDIR(OPNDRN(VCC));


--LCD_DATA[5] is LCD_DATA[5]
--operation mode is bidir

LCD_DATA[5] = BIDIR(OPNDRN(VCC));


--LCD_DATA[6] is LCD_DATA[6]
--operation mode is bidir

LCD_DATA[6] = BIDIR(OPNDRN(VCC));


--LCD_DATA[7] is LCD_DATA[7]
--operation mode is bidir

LCD_DATA[7] = BIDIR(OPNDRN(VCC));


--SD_DAT3 is SD_DAT3
--operation mode is bidir

SD_DAT3 = BIDIR(OPNDRN(VCC));


--SD_CMD is SD_CMD
--operation mode is bidir

SD_CMD = BIDIR(OPNDRN(VCC));


--I2C_SDAT is I2C_SDAT
--operation mode is bidir

I2C_SDAT = BIDIR(OPNDRN(VCC));


--AUD_DACLRCK is AUD_DACLRCK
--operation mode is bidir

AUD_DACLRCK = BIDIR(OPNDRN(VCC));


--AUD_BCLK is AUD_BCLK
--operation mode is bidir

AUD_BCLK = BIDIR(OPNDRN(VCC));


--DRAM_DQ[0] is DRAM_DQ[0]
--operation mode is bidir

DRAM_DQ[0] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[1] is DRAM_DQ[1]
--operation mode is bidir

DRAM_DQ[1] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[2] is DRAM_DQ[2]
--operation mode is bidir

DRAM_DQ[2] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[3] is DRAM_DQ[3]
--operation mode is bidir

DRAM_DQ[3] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[4] is DRAM_DQ[4]
--operation mode is bidir

DRAM_DQ[4] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[5] is DRAM_DQ[5]
--operation mode is bidir

DRAM_DQ[5] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[6] is DRAM_DQ[6]
--operation mode is bidir

DRAM_DQ[6] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[7] is DRAM_DQ[7]
--operation mode is bidir

DRAM_DQ[7] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[8] is DRAM_DQ[8]
--operation mode is bidir

DRAM_DQ[8] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[9] is DRAM_DQ[9]
--operation mode is bidir

DRAM_DQ[9] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[10] is DRAM_DQ[10]
--operation mode is bidir

DRAM_DQ[10] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[11] is DRAM_DQ[11]
--operation mode is bidir

DRAM_DQ[11] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[12] is DRAM_DQ[12]
--operation mode is bidir

DRAM_DQ[12] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[13] is DRAM_DQ[13]
--operation mode is bidir

DRAM_DQ[13] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[14] is DRAM_DQ[14]
--operation mode is bidir

DRAM_DQ[14] = BIDIR(OPNDRN(VCC));


--DRAM_DQ[15] is DRAM_DQ[15]
--operation mode is bidir

DRAM_DQ[15] = BIDIR(OPNDRN(VCC));


--FL_DQ[0] is FL_DQ[0]
--operation mode is bidir

FL_DQ[0] = BIDIR(OPNDRN(VCC));


--FL_DQ[1] is FL_DQ[1]
--operation mode is bidir

FL_DQ[1] = BIDIR(OPNDRN(VCC));


--FL_DQ[2] is FL_DQ[2]
--operation mode is bidir

FL_DQ[2] = BIDIR(OPNDRN(VCC));


--FL_DQ[3] is FL_DQ[3]
--operation mode is bidir

FL_DQ[3] = BIDIR(OPNDRN(VCC));


--FL_DQ[4] is FL_DQ[4]
--operation mode is bidir

FL_DQ[4] = BIDIR(OPNDRN(VCC));


--FL_DQ[5] is FL_DQ[5]
--operation mode is bidir

FL_DQ[5] = BIDIR(OPNDRN(VCC));


--FL_DQ[6] is FL_DQ[6]
--operation mode is bidir

FL_DQ[6] = BIDIR(OPNDRN(VCC));


--FL_DQ[7] is FL_DQ[7]
--operation mode is bidir

FL_DQ[7] = BIDIR(OPNDRN(VCC));


--SRAM_DQ[0] is SRAM_DQ[0]
--operation mode is bidir

SRAM_DQ[0]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[0] = BIDIR(SRAM_DQ[0]_tri_out);


--SRAM_DQ[1] is SRAM_DQ[1]
--operation mode is bidir

SRAM_DQ[1]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[1] = BIDIR(SRAM_DQ[1]_tri_out);


--SRAM_DQ[2] is SRAM_DQ[2]
--operation mode is bidir

SRAM_DQ[2]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[2] = BIDIR(SRAM_DQ[2]_tri_out);


--SRAM_DQ[3] is SRAM_DQ[3]
--operation mode is bidir

SRAM_DQ[3]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[3] = BIDIR(SRAM_DQ[3]_tri_out);


--mVGA_B[6] is mVGA_B[6]
--operation mode is bidir

mVGA_B[6] = SRAM_DQ[4];

--SRAM_DQ[4] is SRAM_DQ[4]
--operation mode is bidir

SRAM_DQ[4]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[4] = BIDIR(SRAM_DQ[4]_tri_out);


--mVGA_B[7] is mVGA_B[7]
--operation mode is bidir

mVGA_B[7] = SRAM_DQ[5];

--SRAM_DQ[5] is SRAM_DQ[5]
--operation mode is bidir

SRAM_DQ[5]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[5] = BIDIR(SRAM_DQ[5]_tri_out);


--mVGA_B[8] is mVGA_B[8]
--operation mode is bidir

mVGA_B[8] = SRAM_DQ[6];

--SRAM_DQ[6] is SRAM_DQ[6]
--operation mode is bidir

SRAM_DQ[6]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[6] = BIDIR(SRAM_DQ[6]_tri_out);


--mVGA_B[9] is mVGA_B[9]
--operation mode is bidir

mVGA_B[9] = SRAM_DQ[7];

--SRAM_DQ[7] is SRAM_DQ[7]
--operation mode is bidir

SRAM_DQ[7]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[7] = BIDIR(SRAM_DQ[7]_tri_out);


--mVGA_G[6] is mVGA_G[6]
--operation mode is bidir

mVGA_G[6] = SRAM_DQ[8];

--SRAM_DQ[8] is SRAM_DQ[8]
--operation mode is bidir

SRAM_DQ[8]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[8] = BIDIR(SRAM_DQ[8]_tri_out);


--mVGA_G[7] is mVGA_G[7]
--operation mode is bidir

mVGA_G[7] = SRAM_DQ[9];

--SRAM_DQ[9] is SRAM_DQ[9]
--operation mode is bidir

SRAM_DQ[9]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[9] = BIDIR(SRAM_DQ[9]_tri_out);


--mVGA_G[8] is mVGA_G[8]
--operation mode is bidir

mVGA_G[8] = SRAM_DQ[10];

--SRAM_DQ[10] is SRAM_DQ[10]
--operation mode is bidir

SRAM_DQ[10]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[10] = BIDIR(SRAM_DQ[10]_tri_out);


--mVGA_G[9] is mVGA_G[9]
--operation mode is bidir

mVGA_G[9] = SRAM_DQ[11];

--SRAM_DQ[11] is SRAM_DQ[11]
--operation mode is bidir

SRAM_DQ[11]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[11] = BIDIR(SRAM_DQ[11]_tri_out);


--mVGA_R[6] is mVGA_R[6]
--operation mode is bidir

mVGA_R[6] = SRAM_DQ[12];

--SRAM_DQ[12] is SRAM_DQ[12]
--operation mode is bidir

SRAM_DQ[12]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[12] = BIDIR(SRAM_DQ[12]_tri_out);


--mVGA_R[7] is mVGA_R[7]
--operation mode is bidir

mVGA_R[7] = SRAM_DQ[13];

--SRAM_DQ[13] is SRAM_DQ[13]
--operation mode is bidir

SRAM_DQ[13]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[13] = BIDIR(SRAM_DQ[13]_tri_out);


--mVGA_R[8] is mVGA_R[8]
--operation mode is bidir

mVGA_R[8] = SRAM_DQ[14];

--SRAM_DQ[14] is SRAM_DQ[14]
--operation mode is bidir

SRAM_DQ[14]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[14] = BIDIR(SRAM_DQ[14]_tri_out);


--mVGA_R[9] is mVGA_R[9]
--operation mode is bidir

mVGA_R[9] = SRAM_DQ[15];

--SRAM_DQ[15] is SRAM_DQ[15]
--operation mode is bidir

SRAM_DQ[15]_tri_out = TRI(data_reg[15], !we);
SRAM_DQ[15] = BIDIR(SRAM_DQ[15]_tri_out);


--OTG_DATA[0] is OTG_DATA[0]
--operation mode is bidir

OTG_DATA[0] = BIDIR(OPNDRN(VCC));


--OTG_DATA[1] is OTG_DATA[1]
--operation mode is bidir

OTG_DATA[1] = BIDIR(OPNDRN(VCC));


--OTG_DATA[2] is OTG_DATA[2]
--operation mode is bidir

OTG_DATA[2] = BIDIR(OPNDRN(VCC));


--OTG_DATA[3] is OTG_DATA[3]
--operation mode is bidir

OTG_DATA[3] = BIDIR(OPNDRN(VCC));


--OTG_DATA[4] is OTG_DATA[4]
--operation mode is bidir

OTG_DATA[4] = BIDIR(OPNDRN(VCC));


--OTG_DATA[5] is OTG_DATA[5]
--operation mode is bidir

OTG_DATA[5] = BIDIR(OPNDRN(VCC));


--OTG_DATA[6] is OTG_DATA[6]
--operation mode is bidir

OTG_DATA[6] = BIDIR(OPNDRN(VCC));


--OTG_DATA[7] is OTG_DATA[7]
--operation mode is bidir

OTG_DATA[7] = BIDIR(OPNDRN(VCC));


--OTG_DATA[8] is OTG_DATA[8]
--operation mode is bidir

OTG_DATA[8] = BIDIR(OPNDRN(VCC));


--OTG_DATA[9] is OTG_DATA[9]
--operation mode is bidir

OTG_DATA[9] = BIDIR(OPNDRN(VCC));


--OTG_DATA[10] is OTG_DATA[10]
--operation mode is bidir

OTG_DATA[10] = BIDIR(OPNDRN(VCC));


--OTG_DATA[11] is OTG_DATA[11]
--operation mode is bidir

OTG_DATA[11] = BIDIR(OPNDRN(VCC));


--OTG_DATA[12] is OTG_DATA[12]
--operation mode is bidir

OTG_DATA[12] = BIDIR(OPNDRN(VCC));


--OTG_DATA[13] is OTG_DATA[13]
--operation mode is bidir

OTG_DATA[13] = BIDIR(OPNDRN(VCC));


--OTG_DATA[14] is OTG_DATA[14]
--operation mode is bidir

OTG_DATA[14] = BIDIR(OPNDRN(VCC));


--OTG_DATA[15] is OTG_DATA[15]
--operation mode is bidir

OTG_DATA[15] = BIDIR(OPNDRN(VCC));


--SD_DAT is SD_DAT
--operation mode is bidir

SD_DAT = BIDIR(OPNDRN(VCC));


--ENET_DATA[0] is ENET_DATA[0]
--operation mode is bidir

ENET_DATA[0] = BIDIR(OPNDRN(VCC));


--ENET_DATA[1] is ENET_DATA[1]
--operation mode is bidir

ENET_DATA[1] = BIDIR(OPNDRN(VCC));


--ENET_DATA[2] is ENET_DATA[2]
--operation mode is bidir

ENET_DATA[2] = BIDIR(OPNDRN(VCC));


--ENET_DATA[3] is ENET_DATA[3]
--operation mode is bidir

ENET_DATA[3] = BIDIR(OPNDRN(VCC));


--ENET_DATA[4] is ENET_DATA[4]
--operation mode is bidir

ENET_DATA[4] = BIDIR(OPNDRN(VCC));


--ENET_DATA[5] is ENET_DATA[5]
--operation mode is bidir

ENET_DATA[5] = BIDIR(OPNDRN(VCC));


--ENET_DATA[6] is ENET_DATA[6]
--operation mode is bidir

ENET_DATA[6] = BIDIR(OPNDRN(VCC));


--ENET_DATA[7] is ENET_DATA[7]
--operation mode is bidir

ENET_DATA[7] = BIDIR(OPNDRN(VCC));


--ENET_DATA[8] is ENET_DATA[8]
--operation mode is bidir

ENET_DATA[8] = BIDIR(OPNDRN(VCC));


--ENET_DATA[9] is ENET_DATA[9]
--operation mode is bidir

ENET_DATA[9] = BIDIR(OPNDRN(VCC));


--ENET_DATA[10] is ENET_DATA[10]
--operation mode is bidir

ENET_DATA[10] = BIDIR(OPNDRN(VCC));


--ENET_DATA[11] is ENET_DATA[11]
--operation mode is bidir

ENET_DATA[11] = BIDIR(OPNDRN(VCC));


--ENET_DATA[12] is ENET_DATA[12]
--operation mode is bidir

ENET_DATA[12] = BIDIR(OPNDRN(VCC));


--ENET_DATA[13] is ENET_DATA[13]
--operation mode is bidir

ENET_DATA[13] = BIDIR(OPNDRN(VCC));


--ENET_DATA[14] is ENET_DATA[14]
--operation mode is bidir

ENET_DATA[14] = BIDIR(OPNDRN(VCC));


--ENET_DATA[15] is ENET_DATA[15]
--operation mode is bidir

ENET_DATA[15] = BIDIR(OPNDRN(VCC));


--GPIO_0[0] is GPIO_0[0]
--operation mode is bidir

GPIO_0[0] = BIDIR(OPNDRN(VCC));


--GPIO_0[1] is GPIO_0[1]
--operation mode is bidir

GPIO_0[1] = BIDIR(OPNDRN(VCC));


--GPIO_0[2] is GPIO_0[2]
--operation mode is bidir

GPIO_0[2] = BIDIR(OPNDRN(VCC));


--GPIO_0[3] is GPIO_0[3]
--operation mode is bidir

GPIO_0[3] = BIDIR(OPNDRN(VCC));


--GPIO_0[4] is GPIO_0[4]
--operation mode is bidir

GPIO_0[4] = BIDIR(OPNDRN(VCC));


--GPIO_0[5] is GPIO_0[5]
--operation mode is bidir

GPIO_0[5] = BIDIR(OPNDRN(VCC));


--GPIO_0[6] is GPIO_0[6]
--operation mode is bidir

GPIO_0[6] = BIDIR(OPNDRN(VCC));


--GPIO_0[7] is GPIO_0[7]
--operation mode is bidir

GPIO_0[7] = BIDIR(OPNDRN(VCC));


--GPIO_0[8] is GPIO_0[8]
--operation mode is bidir

GPIO_0[8] = BIDIR(OPNDRN(VCC));


--GPIO_0[9] is GPIO_0[9]
--operation mode is bidir

GPIO_0[9] = BIDIR(OPNDRN(VCC));


--GPIO_0[10] is GPIO_0[10]
--operation mode is bidir

GPIO_0[10] = BIDIR(OPNDRN(VCC));


--GPIO_0[11] is GPIO_0[11]
--operation mode is bidir

GPIO_0[11] = BIDIR(OPNDRN(VCC));


--GPIO_0[12] is GPIO_0[12]
--operation mode is bidir

GPIO_0[12] = BIDIR(OPNDRN(VCC));


--GPIO_0[13] is GPIO_0[13]
--operation mode is bidir

GPIO_0[13] = BIDIR(OPNDRN(VCC));


--GPIO_0[14] is GPIO_0[14]
--operation mode is bidir

GPIO_0[14] = BIDIR(OPNDRN(VCC));


--GPIO_0[15] is GPIO_0[15]
--operation mode is bidir

GPIO_0[15] = BIDIR(OPNDRN(VCC));


--GPIO_0[16] is GPIO_0[16]
--operation mode is bidir

GPIO_0[16] = BIDIR(OPNDRN(VCC));


--GPIO_0[17] is GPIO_0[17]
--operation mode is bidir

GPIO_0[17] = BIDIR(OPNDRN(VCC));


--GPIO_0[18] is GPIO_0[18]
--operation mode is bidir

GPIO_0[18] = BIDIR(OPNDRN(VCC));


--GPIO_0[19] is GPIO_0[19]
--operation mode is bidir

GPIO_0[19] = BIDIR(OPNDRN(VCC));


--GPIO_0[20] is GPIO_0[20]
--operation mode is bidir

GPIO_0[20] = BIDIR(OPNDRN(VCC));


--GPIO_0[21] is GPIO_0[21]
--operation mode is bidir

GPIO_0[21] = BIDIR(OPNDRN(VCC));


--GPIO_0[22] is GPIO_0[22]
--operation mode is bidir

GPIO_0[22] = BIDIR(OPNDRN(VCC));


--GPIO_0[23] is GPIO_0[23]
--operation mode is bidir

GPIO_0[23] = BIDIR(OPNDRN(VCC));


--GPIO_0[24] is GPIO_0[24]
--operation mode is bidir

GPIO_0[24] = BIDIR(OPNDRN(VCC));


--GPIO_0[25] is GPIO_0[25]
--operation mode is bidir

GPIO_0[25] = BIDIR(OPNDRN(VCC));


--GPIO_0[26] is GPIO_0[26]
--operation mode is bidir

GPIO_0[26] = BIDIR(OPNDRN(VCC));


--GPIO_0[27] is GPIO_0[27]
--operation mode is bidir

GPIO_0[27] = BIDIR(OPNDRN(VCC));


--GPIO_0[28] is GPIO_0[28]
--operation mode is bidir

GPIO_0[28] = BIDIR(OPNDRN(VCC));


--GPIO_0[29] is GPIO_0[29]
--operation mode is bidir

GPIO_0[29] = BIDIR(OPNDRN(VCC));


--GPIO_0[30] is GPIO_0[30]
--operation mode is bidir

GPIO_0[30] = BIDIR(OPNDRN(VCC));


--GPIO_0[31] is GPIO_0[31]
--operation mode is bidir

GPIO_0[31] = BIDIR(OPNDRN(VCC));


--GPIO_0[32] is GPIO_0[32]
--operation mode is bidir

GPIO_0[32] = BIDIR(OPNDRN(VCC));


--GPIO_0[33] is GPIO_0[33]
--operation mode is bidir

GPIO_0[33] = BIDIR(OPNDRN(VCC));


--GPIO_0[34] is GPIO_0[34]
--operation mode is bidir

GPIO_0[34] = BIDIR(OPNDRN(VCC));


--GPIO_0[35] is GPIO_0[35]
--operation mode is bidir

GPIO_0[35] = BIDIR(OPNDRN(VCC));


--GPIO_1[0] is GPIO_1[0]
--operation mode is bidir

GPIO_1[0] = BIDIR(OPNDRN(VCC));


--GPIO_1[1] is GPIO_1[1]
--operation mode is bidir

GPIO_1[1] = BIDIR(OPNDRN(VCC));


--GPIO_1[2] is GPIO_1[2]
--operation mode is bidir

GPIO_1[2] = BIDIR(OPNDRN(VCC));


--GPIO_1[3] is GPIO_1[3]
--operation mode is bidir

GPIO_1[3] = BIDIR(OPNDRN(VCC));


--GPIO_1[4] is GPIO_1[4]
--operation mode is bidir

GPIO_1[4] = BIDIR(OPNDRN(VCC));


--GPIO_1[5] is GPIO_1[5]
--operation mode is bidir

GPIO_1[5] = BIDIR(OPNDRN(VCC));


--GPIO_1[6] is GPIO_1[6]
--operation mode is bidir

GPIO_1[6] = BIDIR(OPNDRN(VCC));


--GPIO_1[7] is GPIO_1[7]
--operation mode is bidir

GPIO_1[7] = BIDIR(OPNDRN(VCC));


--GPIO_1[8] is GPIO_1[8]
--operation mode is bidir

GPIO_1[8] = BIDIR(OPNDRN(VCC));


--GPIO_1[9] is GPIO_1[9]
--operation mode is bidir

GPIO_1[9] = BIDIR(OPNDRN(VCC));


--GPIO_1[10] is GPIO_1[10]
--operation mode is bidir

GPIO_1[10] = BIDIR(OPNDRN(VCC));


--GPIO_1[11] is GPIO_1[11]
--operation mode is bidir

GPIO_1[11] = BIDIR(OPNDRN(VCC));


--GPIO_1[12] is GPIO_1[12]
--operation mode is bidir

GPIO_1[12] = BIDIR(OPNDRN(VCC));


--GPIO_1[13] is GPIO_1[13]
--operation mode is bidir

GPIO_1[13] = BIDIR(OPNDRN(VCC));


--GPIO_1[14] is GPIO_1[14]
--operation mode is bidir

GPIO_1[14] = BIDIR(OPNDRN(VCC));


--GPIO_1[15] is GPIO_1[15]
--operation mode is bidir

GPIO_1[15] = BIDIR(OPNDRN(VCC));


--GPIO_1[16] is GPIO_1[16]
--operation mode is bidir

GPIO_1[16] = BIDIR(OPNDRN(VCC));


--GPIO_1[17] is GPIO_1[17]
--operation mode is bidir

GPIO_1[17] = BIDIR(OPNDRN(VCC));


--GPIO_1[18] is GPIO_1[18]
--operation mode is bidir

GPIO_1[18] = BIDIR(OPNDRN(VCC));


--GPIO_1[19] is GPIO_1[19]
--operation mode is bidir

GPIO_1[19] = BIDIR(OPNDRN(VCC));


--GPIO_1[20] is GPIO_1[20]
--operation mode is bidir

GPIO_1[20] = BIDIR(OPNDRN(VCC));


--GPIO_1[21] is GPIO_1[21]
--operation mode is bidir

GPIO_1[21] = BIDIR(OPNDRN(VCC));


--GPIO_1[22] is GPIO_1[22]
--operation mode is bidir

GPIO_1[22] = BIDIR(OPNDRN(VCC));


--GPIO_1[23] is GPIO_1[23]
--operation mode is bidir

GPIO_1[23] = BIDIR(OPNDRN(VCC));


--GPIO_1[24] is GPIO_1[24]
--operation mode is bidir

GPIO_1[24] = BIDIR(OPNDRN(VCC));


--GPIO_1[25] is GPIO_1[25]
--operation mode is bidir

GPIO_1[25] = BIDIR(OPNDRN(VCC));


--GPIO_1[26] is GPIO_1[26]
--operation mode is bidir

GPIO_1[26] = BIDIR(OPNDRN(VCC));


--GPIO_1[27] is GPIO_1[27]
--operation mode is bidir

GPIO_1[27] = BIDIR(OPNDRN(VCC));


--GPIO_1[28] is GPIO_1[28]
--operation mode is bidir

GPIO_1[28] = BIDIR(OPNDRN(VCC));


--GPIO_1[29] is GPIO_1[29]
--operation mode is bidir

GPIO_1[29] = BIDIR(OPNDRN(VCC));


--GPIO_1[30] is GPIO_1[30]
--operation mode is bidir

GPIO_1[30] = BIDIR(OPNDRN(VCC));


--GPIO_1[31] is GPIO_1[31]
--operation mode is bidir

GPIO_1[31] = BIDIR(OPNDRN(VCC));


--GPIO_1[32] is GPIO_1[32]
--operation mode is bidir

GPIO_1[32] = BIDIR(OPNDRN(VCC));


--GPIO_1[33] is GPIO_1[33]
--operation mode is bidir

GPIO_1[33] = BIDIR(OPNDRN(VCC));


--GPIO_1[34] is GPIO_1[34]
--operation mode is bidir

GPIO_1[34] = BIDIR(OPNDRN(VCC));


--GPIO_1[35] is GPIO_1[35]
--operation mode is bidir

GPIO_1[35] = BIDIR(OPNDRN(VCC));


--A1L674 is rtl~200
A1L674 = !A1L661;


